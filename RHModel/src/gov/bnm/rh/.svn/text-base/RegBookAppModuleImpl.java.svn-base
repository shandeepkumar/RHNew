package gov.bnm.rh;


import gov.bnm.rh.common.RegBookAppModule;
import gov.bnm.rh.views.AttachedfileSupportDocViewObjRowImpl;
import gov.bnm.rh.views.EnquiryfaqForEnqPolicyViewObjRowImpl;
import gov.bnm.rh.views.ExternaluserViewRowImpl;
import gov.bnm.rh.views.ExternaluserorganizationViewRowImpl;
import gov.bnm.rh.views.InternaluserViewRowImpl;
import gov.bnm.rh.views.ItemlistViewRowImpl;
import gov.bnm.rh.views.PolicyViewRowImpl;

import gov.view.common.utils.DateUtil;
import gov.view.common.utils.UtilCommon;
import gov.view.common.validation.ValidatorBaseUtil;
import gov.view.common.validation.ValidatorUtil;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.TooManyObjectsException;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.log4j.Logger;

import org.kohsuke.rngom.parse.host.Base;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 13 07:08:28 GMT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegBookAppModuleImpl extends ApplicationModuleImpl implements RegBookAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public static int NUMBER = Types.NUMERIC;
    public static int DATE = Types.DATE;
    public static int VARCHAR2 = Types.VARCHAR;
    static Logger log = Logger.getLogger(RegBookAppModuleImpl.class);

    public RegBookAppModuleImpl() {
    }

    public String callFuncPolicyAttachment(String policyId) {
        String returnStr = "";
        String sqlStr =
            "SELECT TOP 1 fileId FROM attachedFile WHERE itemId='" + policyId +
            "' and type ='PPDF' " + " ORDER BY orderDate DESC ";
        ViewObject voInst =
            this.createViewObjectFromQueryStmt("attachedFileFileOnly", sqlStr);
        voInst.executeQuery();

        if (voInst.getEstimatedRowCount() > 0) {
            Row row = voInst.first();
            returnStr = row.getAttribute("fileId").toString();
        }
        voInst.remove();
        //        return (String)callStoredFunction(VARCHAR2,
        //                                          "getPolicyAttachment(?,?)",
        //                                          new Object[] { policyId, "PPDF" });
        return returnStr;
    }

    public void getPolicyPublishDecision(String itemid) {
        ViewObjectImpl vo = this.getPolicyView1();
        vo.setWhereClause("itemId=?");
        vo.setWhereClauseParam(0, itemid);
        vo.executeQuery();
    }

    public void getFaqManagementDetails() {
        ViewObjectImpl polFaqVO = this.getEnquiryfaqForFaqManView1();
        polFaqVO.executeQuery();

    }

    public void getAgingReportDetails() {
        ViewObjectImpl vo = this.getPolicyAgingReportViewObj1();
        vo.setNamedWhereClauseParam("bindPolicyAge", 5);
        vo.setNamedWhereClauseParam("bindPolicyAge1", 5);
        vo.setNamedWhereClauseParam("bindItemId", 5);
        vo.setWhereClause(" itemId='' ");
        vo.executeQuery();
    }

    /**
     *
     * @deprecated
     *     Need to refer multiple organization and industries.
     *     refer need method ..filterPolicyActiveOnlyViewUserId ..
     *     created by shankar 04/12/2017
     * @param orgId
     * @param isInternalExternal
     */
    public void filterPolicyActiveOnlyView(String orgId,
                                           String isInternalExternal) {
        ViewObjectImpl vo = this.getPolicyActiveOnlyViewObj1();
        try {
            //vo.setWhereClause("isActive=1 AND NewIssuanceDate <=GETDATE() ");

            log.info("isInternalExternal :  " + isInternalExternal);

            if ("EX".equalsIgnoreCase(isInternalExternal)) {
                String sector = null;
                String instType = null;
                String policyOrgId = "";
                String policySectorId = "";
                String policyInstType = "";
                ViewObjectImpl voOrg = this.getOrganizationView1();
                voOrg.setWhereClause("id=" + orgId);
                voOrg.executeQuery();
                Row row = voOrg.first();
                if (row != null) {
                    sector = row.getAttribute("Sectorid").toString();
                    instType = row.getAttribute("INSTTYPE").toString();
                }

                String sqlStr = null;
                if (orgId != null && orgId != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyOrganizationPartition] WHERE id='" +
                            orgId + "'";
                    ViewObject voOrgPart =
                        this.createViewObjectFromQueryStmt("orgParam", sqlStr);
                    policyOrgId = this.getAllInString(voOrgPart, "itemId");
                }


                if (sector != null && sector != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyBusinessSectorPartition1] WHERE ID=" +
                            sector;

                    ViewObject voSec =
                        this.createViewObjectFromQueryStmt("secParam", sqlStr);
                    policySectorId = this.getAllInString(voSec, "itemId");
                }

                if (instType != null && instType != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyInstitutionTypePartition] WHERE id='" +
                            instType + "'";
                    ViewObject voInst =
                        this.createViewObjectFromQueryStmt("instParam",
                                                           sqlStr);
                    policyInstType = this.getAllInString(voInst, "itemId");
                }

                if (policyOrgId != "" || policySectorId != "" ||
                    policyInstType != "") {
                    policyOrgId =
                            "(" + policyOrgId.concat(policySectorId.concat(policyInstType)) +
                            ")";
                    policyOrgId = policyOrgId.replace(",)", ")");

                    log.info("policyOrgId  :  " + policyOrgId);
                    // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                    //RecordStatus ='ACTIVE'
                    vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE() AND itemId IN" +
                                      policyOrgId);
                } else {

                    // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                    //RecordStatus ='ACTIVE'

                    vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS') AND NewIssuanceDate <=GETDATE() ");
                }

            } else {
                // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                //RecordStatus ='ACTIVE'
                vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE() ");
            }
            vo.executeQuery();
            log.info("vo getQuery :" + vo.getQuery());
            //this.assignSectorInstDepart(vo);
        } catch (Exception e) {
            log.error("Exception @filterPolicyActiveOnlyView .. " + e);
        }
    }


    /**
     *
     *
     */
    public void filterPolicyActiveOnlyViewUserId(String userId,
                                                 String isInternalExternal) {
        ViewObjectImpl vo = this.getPolicyActiveOnlyViewObj1();
        try {
            //vo.setWhereClause("isActive=1 AND NewIssuanceDate <=GETDATE() ");
            //isInternalExternal = "EX";
            //userId = "EXT001";
            log.info("isInternalExternal :  " + isInternalExternal);

            if ("EX".equalsIgnoreCase(isInternalExternal)) {
                String sector = null;
                String instType = null;
                String policyOrgId = "";
                String policySectorId = "";
                String policyInstType = "";
                String sectorId = "";
                String instTypeId = "";

                ViewObjectImpl voExOrg =
                    this.getExternaluserorganizationView1();
                voExOrg.setWhereClause("USERID='" + userId + "'");
                voExOrg.executeQuery();

                //String orgId = getAllInString(voExOrg, "ORGID");
                String orgId =
                    "(".concat(this.getAllInString(voExOrg, "ORGID").concat(")"));
                orgId = orgId.replace(",)", ")");

                //                ExternaluserorganizationViewRowImpl[] rowExOrg =
                //                    (ExternaluserorganizationViewRowImpl[])voExOrg.getAllRowsInRange();
                //
                //                if (rowExOrg.length != 0) {
                //                    for (ExternaluserorganizationViewRowImpl rowExOrgVal :
                //                         rowExOrg)
                //
                //                        rowExOrgVal.getORGID();
                //
                //                    // Date issuanceDate = policyRowImpl.getNewIssuanceDate();
                //                }

                if (!orgId.equals("()")) {
                    ViewObjectImpl voOrgInst =
                        this.getOrganizationinstitutiontypeMultiView1();
                    voOrgInst.setWhereClause("ORGID IN " + orgId);
                    voOrgInst.executeQuery();

                    //String orgId = getAllInString(voExOrg, "ORGID");
                    instTypeId =
                            "(".concat(this.getAllInString(voOrgInst, "INSTTYPEID").concat(")"));
                    instTypeId = instTypeId.replace(",)", ")");


                    ViewObjectImpl voOrg = this.getOrganizationView1();
                    voOrg.setWhereClause("id IN " + orgId);
                    voOrg.executeQuery();

                    Row row = voOrg.first();
                    if (row != null) {
                        sectorId =
                                "(".concat(this.getAllInString(voOrg, "Sectorid").concat(")"));
                        sectorId = sectorId.replace(",)", ")");
                        //sector = row.getAttribute("Sectorid").toString();
                        //instType = row.getAttribute("INSTTYPE").toString();
                    }

                    String sqlStr = null;
                    if (orgId != null && orgId != "") {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyOrganizationPartition] WHERE id IN " +
                                orgId;
                        ViewObject voOrgPart =
                            this.createViewObjectFromQueryStmt("orgParam",
                                                               sqlStr);
                        policyOrgId = this.getAllInString(voOrgPart, "itemId");
                    }


                    if (sectorId != null && sectorId != "") {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyBusinessSectorPartition1] WHERE ID IN" +
                                sectorId;

                        ViewObject voSec =
                            this.createViewObjectFromQueryStmt("secParam",
                                                               sqlStr);
                        policySectorId = this.getAllInString(voSec, "itemId");
                    }

                    if (instTypeId != null && instTypeId != "" &&
                        !instTypeId.equals("()")) {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyInstitutionTypePartition] WHERE id IN " +
                                instTypeId;
                        ViewObject voInst =
                            this.createViewObjectFromQueryStmt("instParam",
                                                               sqlStr);
                        policyInstType = this.getAllInString(voInst, "itemId");
                    }

                    if (policyOrgId != "" || policySectorId != "" ||
                        policyInstType != "") {
                        policyOrgId =
                                "(" + policyOrgId.concat(policySectorId.concat(policyInstType)) +
                                ")";
                        policyOrgId = policyOrgId.replace(",)", ")");

                        log.info("policyOrgId  :  " + policyOrgId);
                        // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                        //RecordStatus ='ACTIVE'
                        vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE() AND itemId IN" +
                                          policyOrgId);
                    } else {

                        // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                        //RecordStatus ='ACTIVE'

                        //vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS') AND NewIssuanceDate <=GETDATE() ");
                        // add below line for display no record found because orgId not exists or policy sector Id etc..

                        vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE() AND itemId =''");
                    }
                } else {
                    vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE()  AND itemId =''");
                }
            } else {
                // added recordStatus to show amedhis policy also.. 1st Nov 2017 by shankar
                //RecordStatus ='ACTIVE'
                vo.setWhereClause("isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND NewIssuanceDate <=GETDATE() ");
            }
            vo.executeQuery();
            log.info("vo getQuery :" + vo.getQuery());
            //this.assignSectorInstDepart(vo);
        } catch (Exception e) {
            log.error("Exception @filterPolicyActiveOnlyView .. " + e);
        }
    }

    /**
     *
     * @param vo
     */

    /*
    public void assignSectorInstDepart(ViewObject vo) {
        try {

            log.info("Length : " + vo.getAllRowsInRange().length);
            int i = 1;
            while (vo.hasNext()) {
                log.info(" record count : " + i);

                PolicyActiveOnlyViewObjRowImpl row =
                    (PolicyActiveOnlyViewObjRowImpl)vo.next();
                log.info("row value : " + row);
                String itemId = row.getitemId();
                log.info("item Id  : " + itemId);
                if (itemId != null) {
                    String sectorsOrInstValue = "";
                    if (row.getpartitionTypeId() == 1) {
                        ViewObjectImpl voSec =
                            this.getPolicybusinesssectorpartition1View1();
                        voSec.setNamedWhereClauseParam("bindItemId", itemId);
                        voSec.executeQuery();

                        sectorsOrInstValue =
                                this.getAllCommaString(voSec, "SectorName").concat(")");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(",)", "");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(")", "");

                        row.setSectors(sectorsOrInstValue);

                        log.info("print value sector : " + row.getSectors());

                    } else if (row.getpartitionTypeId() == 2) {
                        ViewObjectImpl voInst =
                            this.getPolicyinstitutiontypepartitionView1();
                        voInst.setNamedWhereClauseParam("bindItemId", itemId);
                        voInst.executeQuery();

                        sectorsOrInstValue =
                                this.getAllCommaString(voInst, "InstitutiontypeName").concat(")");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(",)", "");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(")", "");

                        row.setInstitutionTypes(sectorsOrInstValue);

                        log.info("print value institiontype : " +
                                 row.getInstitutionTypes());
                    }


                    try {
                        ViewObjectImpl voDept =
                            this.getPolicydepartmentpartitionView1();
                        voDept.setNamedWhereClauseParam("bindItemId", itemId);
                        voDept.executeQuery();


                        sectorsOrInstValue =
                                this.getAllCommaString(voDept, "DepartmentName").concat(")");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(",)", "");
                        sectorsOrInstValue =
                                sectorsOrInstValue.replace(")", "");

                        row.setIssuingDepartment(sectorsOrInstValue);

                        log.info("print value department : " +
                                 row.getIssuingDepartment());
                    } catch (Exception e) {
                        log.error("Exception @IssuingDepartment fetch.. " + e);
                    }

                }
                i++;
            }
        } catch (Exception e) {
            log.error("Exception @assignSectorInstDepart .. " + e);
        }
    }

*/

    public void filterCateByParentId() {
        ViewObjectImpl vo = this.getCategoriesView7();
        try {

            log.info("start query criteria. ..");
            vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("CategoriesCondParentNodeIdViewCriteria"));
            vo.executeQuery();

            log.info("query execute.. " + vo.getQuery());
        } catch (Exception e) {
            log.error("Exception @filterCateByParentId .. " + e);
        }
    }


    public void createNewPolicy(String policy, String userId) {

        try {
            log.info("createNewPolicy policy::" + policy);
            ViewObjectImpl itemlistVO = this.getItemlistView1();
            Row itemlistRow = itemlistVO.createRow();

            itemlistRow.setAttribute("itemid", policy);
            itemlistRow.setAttribute("createDate", new Date());
            ViewObjectImpl policyVO = this.getPolicyView3();
            Row policyRow = policyVO.createRow();
            policyRow.setAttribute("itemId", policy);
            policyRow.setAttribute("policyId", policy);

            ViewObjectImpl interVO = this.getInternaluserManagersViewObj1();
            interVO.setNamedWhereClauseParam("bindUserId", userId);
            interVO.executeQuery();

        } catch (TooManyObjectsException ex) {
            log.info("TooManyObjectsException::" + ex.getMessage());
        }
        return;
    }

    public void filterByPolicyId(String itemid, String userId) {
        log.info("filterByPolicyId policy::" + itemid);
        if (itemid != null && !itemid.equals("")) {
            ViewObjectImpl itemlistVO = this.getItemlistView1();
            itemlistVO.setWhereClause("itemid ='" + itemid + "'");
            itemlistVO.executeQuery();

            //            ViewObjectImpl policyVO = this.getPolicyView3();
            //            policyVO.setWhereClause("itemId ='" + itemid + "'");
            //            policyVO.setNamedWhereClauseParam("bindItemId", itemid);
            //            policyVO.executeQuery();
            //            log.info("filterByPolicyId getQuery:3:" + policyVO.getQuery());
            ViewObjectImpl policyAttVO = this.getAttachedfileView2_1();
            policyAttVO.setNamedWhereClauseParam("bindItemId", itemid);
            policyAttVO.executeQuery();
            ViewObjectImpl policyOthVO = this.getAttachedfileEx1View1();
            policyOthVO.setNamedWhereClauseParam("bindItemId", itemid);
            policyOthVO.setNamedWhereClauseParam("bindType", "OTH");
            policyOthVO.executeQuery();
            ViewObjectImpl polSupVO = this.getSuperseededpoliciesView1();
            polSupVO.setNamedWhereClauseParam("bindItemId", itemid);
            polSupVO.executeQuery();
            ViewObjectImpl polFaqVO = this.getEnquiryfaqForFaqView1();
            polFaqVO.setNamedWhereClauseParam("bindItemId", itemid);
            polFaqVO.executeQuery();
            ViewObjectImpl polDepVO = this.getPolicydepartmentpartitionView1();
            polDepVO.setNamedWhereClauseParam("bindItemId", itemid);
            polDepVO.executeQuery();
            ViewObjectImpl polCatVO = this.getPolicycategoriespartitionView1();
            polCatVO.setNamedWhereClauseParam("bindItemId", itemid);
            polCatVO.executeQuery();
            ViewObjectImpl policyBnmuserVO =
                this.getPolicybnmuserspartitionView1();
            policyBnmuserVO.setNamedWhereClauseParam("bindItemId", itemid);
            policyBnmuserVO.executeQuery();
            ViewObjectImpl polSecVO =
                this.getPolicybusinesssectorpartition1View1();
            polSecVO.setNamedWhereClauseParam("bindItemId", itemid);
            polSecVO.executeQuery();
            ViewObjectImpl polInstVO =
                this.getPolicyinstitutiontypepartitionView1();
            polInstVO.setNamedWhereClauseParam("bindItemId", itemid);
            polInstVO.executeQuery();
            ViewObjectImpl polOrgVO =
                this.getPolicyorganizationpartitionView1();
            polOrgVO.setNamedWhereClauseParam("bindItemId", itemid);
            polOrgVO.executeQuery();
            ViewObjectImpl interVO = this.getInternaluserManagersViewObj1();
            interVO.setNamedWhereClauseParam("bindUserId", userId);
            interVO.executeQuery();
            ViewObjectImpl suppDocVO =
                this.getAttachedfileSupportDocViewObj1();
            suppDocVO.setNamedWhereClauseParam("bindItemId", itemid);
            suppDocVO.executeQuery();
            ViewObjectImpl faqVO = this.getEnquiryfaqForFaqView1();
            faqVO.setNamedWhereClauseParam("bindItemId", itemid);
            faqVO.executeQuery();
            log.info("itemlistVO.getEstimatedRowCount() before ::" +
                     itemlistVO.getEstimatedRowCount());
            if (itemlistVO.getEstimatedRowCount() > 0) {
                ItemlistViewRowImpl itemRow =
                    (ItemlistViewRowImpl)itemlistVO.first();
                PolicyViewRowImpl policyRow =
                    (PolicyViewRowImpl)itemRow.getPolicyView();
                log.info("policyRow.getEffectiveDate() before ::" +
                         policyRow.getEffectiveDate());
                policyRow.setEffectiveDate(UtilCommon.decryptSpecialChar(policyRow.getEffectiveDate()));
                log.info("policyRow.getEffectiveDate() after ::" +
                         policyRow.getEffectiveDate());
                policyRow.setSummary(UtilCommon.decryptSpecialChar(policyRow.getSummary()));

                policyRow.setHighlights(UtilCommon.decryptSpecialChar(policyRow.getHighlights()));
            }

        }
    }

    public String filterByPolicyIdOnlyPolicyTable(String itemid) {
        log.info("filterByPolicyIdOnlyPolicyTable ::" + itemid);
        try {
            if (itemid != null && !itemid.equals("")) {
                ViewObjectImpl policyVO = this.getPolicyView1();
                policyVO.setWhereClause("itemId ='" + itemid + "'");
                policyVO.executeQuery();

                if (ValidatorUtil.isNotNull(policyVO)) {
                    Row[] rowPolicy = policyVO.getAllRowsInRange();
                    log.info(" row lenth  : " + rowPolicy.length);

                    if (rowPolicy.length != 0) {
                        PolicyViewRowImpl policyRowImpl =
                            (PolicyViewRowImpl)rowPolicy[0];

                        Date issuanceDate = policyRowImpl.getNewIssuanceDate();

                        long days =
                            DateUtil.difference(issuanceDate, DateUtil.getTodayDateTime());

                        /***
                         * days is difference between issuance date and current date.
                         * 1461 is (365 * 4) + 1
                         * 1826 is (365 * 5) + 1
                         *
                         ***/

                        log.info("differ  :  " + days);
                        if (days >= 1461 && days <= 1826) {
                            return "success";
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "failure";
    }

    public void filterByPolicyIdToPreface(String itemid, String userId,
                                          String isInternalExternal,
                                          String userRoleId, String depOrOrg) {
        log.info("filterByPolicyIdToPreface policy::" + itemid);
        log.info(" userRoleId::" + userRoleId);
        log.info(" depOrOrg::" + depOrOrg);
        String loginUserDepId = "";
        String loginUserOrgId = "";
        boolean isCeoOic = false;
        List polDepList = new ArrayList();
        userRoleId = ValidatorBaseUtil.getStr(userRoleId);
        try {
            if (itemid != null && !itemid.equals("")) {
                ViewObjectImpl itemlistVO = this.getPolicyView1();
                itemlistVO.setWhereClause("itemId=?");
                itemlistVO.setWhereClauseParam(0, itemid);
                itemlistVO.executeQuery();
                Row row = itemlistVO.first();
                itemlistVO.setCurrentRow(itemlistVO.first());
                if (row != null) {
                    log.info("in getFetchedRowCount::" +
                             row.getAttribute("itemId"));


                    String itemId = row.getAttribute("itemId").toString();
                    ViewObjectImpl poldocVO =
                        this.getAttachedFileOnlyPdfViewObj1();
                    poldocVO.setNamedWhereClauseParam("bindItemId", itemId);
                    poldocVO.setWhereClause(" type ='PPDF' ");
                    poldocVO.executeQuery();
                    ViewObjectImpl polOthVO = this.getAttachedfileEx1View1();
                    polOthVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polOthVO.setNamedWhereClauseParam("bindType", "OTH");
                    polOthVO.executeQuery();
                    ViewObjectImpl polDepVO =
                        this.getPolicydepartmentpartitionView1();
                    polDepVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polDepVO.executeQuery();
                    if ("IN".equals(isInternalExternal)) {
                        // loginUserDepId = this.getInternalUserDepId(userId);
                        if (polDepVO.getEstimatedRowCount() > 0) {
                            while (polDepVO.hasNext()) {
                                Row depRow = polDepVO.next();
                                polDepList.add(ValidatorBaseUtil.getStr(depRow.getAttribute("departmentId")));
                            }
                        }
                        loginUserDepId = depOrOrg;
                    } else {
                        loginUserOrgId = depOrOrg;
                        //loginUserOrgId = this.getExternalUserOrgId(userId);
                        if ("06".equals(userRoleId) ||
                            "07".equals(userRoleId)) {
                            isCeoOic = true;
                        }
                        //isCeoOic = this.getExternalUserRoleId(userId);
                    }
                    ViewObjectImpl polCatVO =
                        this.getPolicycategoriespartitionView1();
                    polCatVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polCatVO.executeQuery();
                    ViewObjectImpl polSecVO =
                        this.getPolicybusinesssectorpartition1View1();
                    polSecVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polSecVO.executeQuery();
                    ViewObjectImpl polInstVO =
                        this.getPolicyinstitutiontypepartitionView1();
                    polInstVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polInstVO.executeQuery();
                    ViewObjectImpl polOrgVO =
                        this.getPolicyorganizationpartitionView1();
                    polOrgVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polOrgVO.executeQuery();


                    if (polSecVO.getRowCount() != 0) {
                        this.checkAssignApplicability(polSecVO, 1);
                    } else if (polInstVO.getRowCount() != 0) {
                        this.checkAssignApplicability(polInstVO, 2);
                    } else if (polOrgVO.getRowCount() != 0) {
                        this.checkAssignApplicability(polOrgVO, 3);
                    } else {
                        ViewObjectImpl voSecDist = this.getSectorDistinct1();
                        voSecDist.setWhereClause("SectorID =999999 ");
                        voSecDist.executeQuery();
                    }
                    ViewObjectImpl polSupVO =
                        this.getSuperseededpoliciesView1();
                    polSupVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polSupVO.executeQuery();
                    ViewObjectImpl polFaqVO = this.getEnquiryfaqForFaqView1();
                    polFaqVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polFaqVO.setWhereClause(" faqStatus='ACTIVE' ");
                    polFaqVO.executeQuery();


                    try {

                        String originPolicyId = null;
                        ViewObject amendmentVO =
                            this.getPolicyamendmentsView1();
                        amendmentVO.setWhereClause("amendedPolicyId ='" +
                                                   itemId + "'");
                        amendmentVO.executeQuery();
                        if (amendmentVO.getEstimatedRowCount() > 0) {
                            Row amendRow = amendmentVO.first();
                            originPolicyId =
                                    String.valueOf(amendRow.getAttribute("OriginPolicyId"));
                        }

                        ViewObjectImpl polAmHisVO =
                            this.getPolicyamendmentHistoryViewObj1();
                        polAmHisVO.setNamedWhereClauseParam("bindOriginPolicyId",
                                                            originPolicyId);
                        polAmHisVO.executeQuery();

                    } catch (Exception e) {
                        log.error("Erro : " + e);
                    }

                    ViewObjectImpl bnmUserVO =
                        this.getPolicybnmuserspartitionView1();
                    bnmUserVO.setNamedWhereClauseParam("bindItemId", itemId);
                    bnmUserVO.executeQuery();

                    ViewObjectImpl polSuppVO =
                        this.getAttachedfileSupportDocViewObj1();
                    polSuppVO.setNamedWhereClauseParam("bindItemId", itemId);
                    polSuppVO.executeQuery();
                    while (polSuppVO.hasNext()) {
                        AttachedfileSupportDocViewObjRowImpl suppRow =
                            (AttachedfileSupportDocViewObjRowImpl)polSuppVO.next();
                        if (suppRow.getisRequiredAccess() && userId != null &&
                            !userId.equals("")) {
                            ViewObjectImpl reqVO = this.getRequestlistView1();
                            reqVO.setWhereClause(" requestorId='" + userId +
                                                 "' and typeOfReqId='" +
                                                 suppRow.getfileId() +
                                                 "' and status='APPROVED' and DATEADD(dd, 14, updateDate) >= getdate() ");
                            reqVO.executeQuery();
                            if (reqVO != null &&
                                reqVO.getEstimatedRowCount() > 0) {
                                suppRow.setisRequiredAccess(false);
                            }
                        }
                    }
                    ViewObjectImpl polEnqVO =
                        this.getEnquiryfaqForEnqPolicyViewObj1();
                    polEnqVO.setNamedWhereClauseParam("bindItemId", itemId);
                    //External can see his records only
                    if ("EX".equals(isInternalExternal)) {
                        polEnqVO.setWhereClause(" isInternalExternal ='" +
                                                isInternalExternal + "' ");
                    }
                    polEnqVO.executeQuery();
                    long enqSize = polEnqVO.getEstimatedRowCount();
                    log.info("enqSize::" + enqSize);
                    String enqIds = "";
                    List enqList = new ArrayList();
                    //RH Admin(01)  (Answered and pending enquries)
                    if ("01".equals(userRoleId)) {
                        while (polEnqVO.hasNext()) {
                            EnquiryfaqForEnqPolicyViewObjRowImpl enqRow =
                                (EnquiryfaqForEnqPolicyViewObjRowImpl)polEnqVO.next();
                            String enquiryFAQId = enqRow.getEnquiryFAQId();
                            enqList.add(enquiryFAQId);
                            enqIds += " '" + enquiryFAQId + "' ,";
                        }
                    } else if ("EX".equals(isInternalExternal)) {
                        //External OIC(06) AND CEO(07) or own  institution (answered and pending enquries)
                        while (polEnqVO.hasNext()) {
                            EnquiryfaqForEnqPolicyViewObjRowImpl enqRow =
                                (EnquiryfaqForEnqPolicyViewObjRowImpl)polEnqVO.next();
                            String createdBy = enqRow.getcreatedBy();
                            String sharingOption =
                                ValidatorBaseUtil.getStr(enqRow.getsharingOption());
                            String enquiryFAQId = enqRow.getEnquiryFAQId();
                            String createdByOrgId =
                                this.getExternalUserOrgId(createdBy);
                            if (createdBy != null &&
                                userId.equals(createdBy)) {
                                enqIds += " '" + enquiryFAQId + "' ,";
                                enqList.add(enquiryFAQId);
                            } else {

                                if (sharingOption.equals("OIC_CEO") &&
                                    isCeoOic &&
                                    createdByOrgId.equals(loginUserOrgId)) {
                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                } else if (sharingOption.equals("INST") &&
                                           createdByOrgId.equals(loginUserOrgId)) {
                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                }
                            }
                        }
                    } else if ("IN".equals(isInternalExternal)) {
                        //Internal user view his data and external ANSWERED data also
                        while (polEnqVO.hasNext()) {
                            EnquiryfaqForEnqPolicyViewObjRowImpl enqRow =
                                (EnquiryfaqForEnqPolicyViewObjRowImpl)polEnqVO.next();
                            String createdBy =
                                ValidatorBaseUtil.getStr(enqRow.getcreatedBy());
                            String sharingOption =
                                ValidatorBaseUtil.getStr(enqRow.getsharingOption());
                            String enquiryFAQId = enqRow.getEnquiryFAQId();
                            String createdByDepId =
                                this.getInternalUserDepId(createdBy);


                            if (createdBy != null &&
                                userId.equals(createdBy)) {
                                enqIds += " '" + enquiryFAQId + "' ,";
                                enqList.add(enquiryFAQId);
                            } else {
                                if (sharingOption.equals("DEP") &&
                                    createdByDepId.equals(loginUserDepId)) {

                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                } else if (sharingOption.equals("ALL") &&
                                           "IN".equals(isInternalExternal)) {
                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                } else if ("EX".equals(ValidatorBaseUtil.getStr(enqRow.getisInternalExternal())) &&
                                           "ANSWERED".equals(ValidatorBaseUtil.getStr(enqRow.getenquiryStatus()))) {
                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                } else if ("09".equals(userRoleId) &&
                                           polDepList.contains(loginUserDepId)) { //PIC(RHDepAdmin (09))
                                    enqIds += " '" + enquiryFAQId + "' ,";
                                    enqList.add(enquiryFAQId);
                                }
                            }
                        }
                    }
                    if (enqSize > 0 && enqSize != enqList.size()) {
                        enqIds = "(" + enqIds + ")";
                        enqIds = enqIds.replace(",)", ")");
                        ViewObjectImpl polEnqVO1 =
                            this.getEnquiryfaqForEnqPolicyViewObj1();
                        polEnqVO1.setNamedWhereClauseParam("bindItemId",
                                                           itemId);
                        if (enqList.size() == 0) {
                            polEnqVO1.setWhereClause(" EnquiryFAQId='' ");
                        } else {
                            polEnqVO1.setWhereClause(" EnquiryFAQId IN " +
                                                     enqIds);
                        }
                        polEnqVO1.executeQuery();
                    }
                    ViewObjectImpl reqVO = this.getRequestlistView1();
                    reqVO.setWhereClause("itemId ='" + itemId +
                                         "' AND requestorId='" + userId +
                                         "' and typeOfReq ='SUPPDOC' ");
                    reqVO.executeQuery();
                }
            }
        } catch (Exception e) {
            log.error("Exception @filterByPolicyIdToPreface  :  " + e);
        }


    }

    private String getInternalUserDepId(String userId) {
        String depId = "";
        ViewObjectImpl vo = this.getInternaluserView1();
        vo.setWhereClause(" USERID='" + userId + "'");
        vo.executeQuery();
        while (vo.hasNext()) {
            InternaluserViewRowImpl row = (InternaluserViewRowImpl)vo.next();
            depId = ValidatorBaseUtil.getStr(row.getDEPTID());
        }
        return depId;
    }

    private String getExternalUserOrgId(String userId) {
        String orgId = "";
        try {
            ViewObjectImpl vo = this.getExternaluserView1();
            vo.setWhereClause(" EMAIL='" + userId + "' ");
            vo.executeQuery();
            while (vo.hasNext()) {
                ExternaluserViewRowImpl row =
                    (ExternaluserViewRowImpl)vo.next();
                orgId = ValidatorBaseUtil.getStr(row.getORGID());
            }
        } catch (Exception e) {
            log.error("Exception @getExternalUserOrgId  .. " + e);
        }
        return orgId;
    }

    private boolean getExternalUserRoleId(String userId) {
        boolean returnVal = false;
        try {
            ViewObjectImpl vo = this.getUserUsergroupView1();
            vo.setWhereClause(" USERID='" + userId +
                              "' and GROUPID in ('06','07') ");
            vo.executeQuery();

            log.info("Length of user group  list  : " +
                     vo.getAllRowsInRange().length);

            while (vo.hasNext()) {
                returnVal = true;
                break;
            }
        } catch (Exception e) {
            log.error("Exception  @getExternalUserRoleId  . ." + e);
        }
        return returnVal;
    }


    public void getInsernalUserFaqManagementDetails(String departmentId) {
        ViewObjectImpl polFaqVO = this.getEnquiryfaqForFaqManView1();
        if (departmentId != null && !departmentId.equals("")) {

            polFaqVO.setWhereClause(" faqStatus = 'ACTIVE' and itemId IN ( SELECT itemId FROM PolicyDepartmentPartition WHERE departmentId ='" +
                                    departmentId + "')");

        } else {
            polFaqVO.setWhereClause(" faqStatus = 'ACTIVE' and itemId ='XXXxTESTAAAAAAA' ");
        }
        polFaqVO.executeQuery();
    }


    public void getAgingResponseManagementDetails(String departmentId,
                                                  String policyDuration,
                                                  String legislationKey) {
        log.info("getAgingResponseManagementDetails:departmentId:" +
                 departmentId);
        log.info("getAgingResponseManagementDetails:policyDuration:" +
                 policyDuration);
        ViewObjectImpl voAge = this.getPolicyAgingEmailViewObj1();
        voAge.setNamedWhereClauseParam("bindPolicyAge", policyDuration);
        voAge.setNamedWhereClauseParam("bindPolicyAge1", policyDuration);
        voAge.setNamedWhereClauseParam("bindDocCategory", legislationKey);
        voAge.setNamedWhereClauseParam("bindPolicyAge2", policyDuration);
        if (departmentId != null && !departmentId.equals("") &&
            !departmentId.equals("ADMIN")) {
            voAge.setWhereClause(" daysDiff between 0 and 366 and itemId IN ( SELECT itemId FROM PolicyDepartmentPartition WHERE departmentId ='" +
                                 departmentId + "')");
        } else {
            voAge.setWhereClause(" daysDiff between 0 and 366 ");
        }
        voAge.executeQuery();
        log.info("getAgingResponseManagementDetails:Done:");
    }

    public void getSupportingDocumentsRequests(String departmentId) {
        ViewObjectImpl voReq = this.getRequestlistView1();
        if (departmentId != null && !departmentId.equals("") &&
            !departmentId.equals("ADMIN")) {
            voReq.setWhereClause(" itemId IN ( SELECT itemId FROM PolicyDepartmentPartition WHERE departmentId ='" +
                                 departmentId +
                                 "' ) and typeOfReq ='SUPPDOC' ");
        } else {
            voReq.setWhereClause(" typeOfReq ='SUPPDOC' ");
        }
        voReq.executeQuery();
    }

    public void refreshPolicyMaintenance() {
        ViewObjectImpl vo = this.getPolicyActiveOnlyViewObj1();
        vo.executeQuery();

    }

    public void getSupportingDocumentsDecision(String requestId) {
        ViewObjectImpl voReq = this.getRequestlistView1();
        voReq.setWhereClause(" requestId ='" + requestId + "' ");
        voReq.executeQuery();
    }

    public void getEnquiryManagementDetails(String departmentId) {
        ViewObjectImpl enqPendingVO =
            this.getEnquiryfaqForEnqPendingViewObj1();
        if (departmentId != null && !departmentId.equals("") &&
            !departmentId.equals("ADMIN")) {
            enqPendingVO.setWhereClause(" itemId IN ( SELECT itemId FROM PolicyDepartmentPartition WHERE departmentId ='" +
                                        departmentId + "' )  ");
        }
        enqPendingVO.executeQuery();
        ViewObjectImpl enqVO = this.getEnquiryfaqForEnqViewObj1();
        if (departmentId != null && !departmentId.equals("") &&
            !departmentId.equals("ADMIN")) {
            enqVO.setWhereClause(" enquiryStatus='ANSWERED' AND itemId IN ( SELECT itemId FROM PolicyDepartmentPartition WHERE departmentId ='" +
                                 departmentId + "' )  ");
        } else {
            enqVO.setWhereClause(" enquiryStatus='ANSWERED' ");
        }
        enqVO.executeQuery();

    }

    public void getApprovalPolicys(String userId) {
        ViewObjectImpl vo = this.getPolicyPendingViewObj1();
        //        vo.setWhereClause("approverId= '" + userId +
        //                          "' AND isActive =0 AND RecordStatus IN ('PENDING') ");
        vo.setNamedWhereClauseParam("bindApproverId", userId);
        vo.executeQuery();
        ViewObjectImpl voActive = this.getPolicyActiveOnlyViewObj1();
        voActive.setWhereClause("approverId= '" + userId +
                                "' AND isActive =1 AND RecordStatus IN ('ACTIVE') ");
        voActive.executeQuery();
        ViewObjectImpl voReject = this.getPolicyRejectedViewObj1();
        voReject.setNamedWhereClauseParam("bindApproverId", userId);
        voReject.executeQuery();
    }

    public void getEnquiryResponse(String enquiryFAQId) {
        ViewObjectImpl vo = this.getEnquiryfaqForEnqViewObj1();
        vo.setWhereClause(" EnquiryFAQId='" + enquiryFAQId + "' ");
        vo.executeQuery();
        ViewObject attQueVO = this.getAttachedfileForEnqQueView1();
        attQueVO.setNamedWhereClauseParam("bindEnqId", enquiryFAQId);
        attQueVO.executeQuery();
        ViewObject attAnsVO = this.getAttachedfileForEnqAnsView1();
        attAnsVO.setNamedWhereClauseParam("bindEnqId", enquiryFAQId);
        attAnsVO.executeQuery();
    }

    /**
     * depercated
     *  New method add below on Dec 6th 2017;  getWhatsNewPolicysUserId CR with multiple organization and instutitionType.
     * @param isInternalExternal
     * @param orgId
     * @param depId
     */
    public void getWhatsNewPolicys(String isInternalExternal, String orgId,
                                   String depId) {
        try {
            ViewObjectImpl vo = this.getPolicyActiveOnlyViewObj1();


            if ("IN".equalsIgnoreCase(isInternalExternal)) {

                vo.setWhereClause(" isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS') AND DisplayInWhatsNew = 1 AND ExpiryDate >= GETDATE() AND NewIssuanceDate <=GETDATE() ");

            } else if ("EX".equalsIgnoreCase(isInternalExternal) &&
                       orgId != null && !orgId.equals("")) {
                String sector = null;
                String instType = null;
                String policyOrgId = "";
                String policySectorId = "";
                String policyInstType = "";
                ViewObjectImpl voOrg = this.getOrganizationView1();
                voOrg.setWhereClause("id=" + orgId);
                voOrg.executeQuery();
                Row row = voOrg.first();
                if (row != null) {
                    sector = row.getAttribute("Sectorid").toString();
                    instType = row.getAttribute("INSTTYPE").toString();
                }

                String sqlStr = null;
                if (orgId != null && orgId != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyOrganizationPartition] WHERE id='" +
                            orgId + "'";
                    ViewObject voOrgPart =
                        this.createViewObjectFromQueryStmt("orgParam", sqlStr);
                    policyOrgId = this.getAllInString(voOrgPart, "itemId");
                }


                if (sector != null && sector != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyBusinessSectorPartition1] WHERE ID=" +
                            sector;

                    ViewObject voSec =
                        this.createViewObjectFromQueryStmt("secParam", sqlStr);
                    policySectorId = this.getAllInString(voSec, "itemId");
                }

                if (instType != null && instType != "") {
                    sqlStr =
                            "SELECT DISTINCT itemId FROM [dbo].[PolicyInstitutionTypePartition] WHERE id='" +
                            instType + "'";
                    ViewObject voInst =
                        this.createViewObjectFromQueryStmt("instParam",
                                                           sqlStr);
                    policyInstType = this.getAllInString(voInst, "itemId");
                }

                if (policyOrgId != "" || policySectorId != "" ||
                    policyInstType != "") {
                    policyOrgId =
                            "(" + policyOrgId.concat(policySectorId.concat(policyInstType)) +
                            ")";
                    policyOrgId = policyOrgId.replace(",)", ")");

                    log.info("policyOrgId what's new  :  " + policyOrgId);

                    vo.setWhereClause(" isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS') AND DisplayInWhatsNew = 1 AND ExpiryDate >= GETDATE() AND NewIssuanceDate <=GETDATE() AND itemId IN " +
                                      policyOrgId);

                } else {
                    vo.setWhereClause(" isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS')  AND itemId ='' ");
                }
            } else {
                vo.setWhereClause(" isActive=1 AND RecordStatus IN ('ACTIVE','AMENDHIS') AND itemId ='' ");
            }
            vo.executeQuery();
            log.info("getWhatsNewPolicys query :- " + vo.getQuery());
            //this.assignSectorInstDepart(vo);
        } catch (Exception e) {
            log.error("Exception @getWhatsNewPolicys .. " + e);
        }
    }


    /**
     *
     * New method add on Dec 6th 2017; CR with multiple organization and instutitionType.
     * @param isInternalExternal
     * @param userId
     * @param depId
     */
    public void getWhatsNewPolicysUserId(String isInternalExternal,
                                         String userId, String depId) {
        try {

            //isInternalExternal = "EX";
            //userId = "EXT001";
            ViewObjectImpl vo = this.getPolicyActiveOnlyViewObj1();
            if ("IN".equalsIgnoreCase(isInternalExternal)) {

                vo.setWhereClause(" isActive=1 AND RecordStatus ='ACTIVE' AND DisplayInWhatsNew = 1 AND ExpiryDate >= GETDATE() AND NewIssuanceDate <=GETDATE() ");

            } else if ("EX".equalsIgnoreCase(isInternalExternal) &&
                       userId != null && !userId.equals("")) {
                String sectorId = null;
                String instTypeId = null;

                String policyOrgId = "";
                String policySectorId = "";
                String policyInstType = "";


                ViewObjectImpl voExOrg =
                    this.getExternaluserorganizationView1();
                voExOrg.setWhereClause("USERID='" + userId + "'");
                voExOrg.executeQuery();

                //String orgId = getAllInString(voExOrg, "ORGID");
                String orgId =
                    "(".concat(this.getAllInString(voExOrg, "ORGID").concat(")"));
                orgId = orgId.replace(",)", ")");

                //                ExternaluserorganizationViewRowImpl[] rowExOrg =
                //                    (ExternaluserorganizationViewRowImpl[])voExOrg.getAllRowsInRange();
                //
                //                if (rowExOrg.length != 0) {
                //                    for (ExternaluserorganizationViewRowImpl rowExOrgVal :
                //                         rowExOrg)
                //
                //                        rowExOrgVal.getORGID();
                //
                //                    // Date issuanceDate = policyRowImpl.getNewIssuanceDate();
                //                }


                // add to check orgId is not null FEB 13th 2018
                if (!orgId.equals("()")) {
                    ViewObjectImpl voOrgInst =
                        this.getOrganizationinstitutiontypeMultiView1();
                    voOrgInst.setWhereClause("ORGID IN " + orgId);
                    voOrgInst.executeQuery();

                    //String orgId = getAllInString(voExOrg, "ORGID");
                    instTypeId =
                            "(".concat(this.getAllInString(voOrgInst, "INSTTYPEID").concat(")"));
                    instTypeId = instTypeId.replace(",)", ")");


                    ViewObjectImpl voOrg = this.getOrganizationView1();
                    voOrg.setWhereClause("id IN " + orgId);
                    voOrg.executeQuery();

                    Row row = voOrg.first();
                    if (row != null) {
                        sectorId =
                                "(".concat(this.getAllInString(voOrg, "Sectorid").concat(")"));
                        sectorId = sectorId.replace(",)", ")");
                        //sector = row.getAttribute("Sectorid").toString();
                        //instType = row.getAttribute("INSTTYPE").toString();
                    }


                    String sqlStr = null;
                    if (orgId != null && orgId != "") {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyOrganizationPartition] WHERE id IN " +
                                orgId;
                        ViewObject voOrgPart =
                            this.createViewObjectFromQueryStmt("orgParam",
                                                               sqlStr);
                        policyOrgId = this.getAllInString(voOrgPart, "itemId");
                    }


                    if (sectorId != null && sectorId != "") {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyBusinessSectorPartition1] WHERE ID IN " +
                                sectorId;

                        ViewObject voSec =
                            this.createViewObjectFromQueryStmt("secParam",
                                                               sqlStr);
                        policySectorId = this.getAllInString(voSec, "itemId");
                    }

                    // add && !instTypeId.equals("()") for check not instTypeId is emply add on Feb13th 2018
                    if (instTypeId != null && instTypeId != "" &&
                        !instTypeId.equals("()")) {
                        sqlStr =
                                "SELECT DISTINCT itemId FROM [dbo].[PolicyInstitutionTypePartition] WHERE id IN" +
                                instTypeId;
                        ViewObject voInst =
                            this.createViewObjectFromQueryStmt("instParam",
                                                               sqlStr);
                        policyInstType = this.getAllInString(voInst, "itemId");
                    }

                    if (policyOrgId != "" || policySectorId != "" ||
                        policyInstType != "") {
                        policyOrgId =
                                "(" + policyOrgId.concat(policySectorId.concat(policyInstType)) +
                                ")";
                        policyOrgId = policyOrgId.replace(",)", ")");

                        log.info("policyOrgId what's new  :  " + policyOrgId);

                        vo.setWhereClause(" isActive=1 AND RecordStatus ='ACTIVE' AND DisplayInWhatsNew = 1 AND ExpiryDate >= GETDATE() AND NewIssuanceDate <=GETDATE() AND itemId IN " +
                                          policyOrgId);

                    } else {
                        vo.setWhereClause(" isActive=1 AND RecordStatus ='ACTIVE'  AND itemId ='' ");
                    }
                } else {
                    // add If orgId is null Feb13th 2018
                    vo.setWhereClause(" isActive=1 AND RecordStatus ='ACTIVE'  AND itemId ='' ");
                }
            } else {
                vo.setWhereClause(" isActive=1 AND RecordStatus ='ACTIVE' AND itemId ='' ");
            }
            vo.executeQuery();
            log.info("getWhatsNewPolicys query :- " + vo.getQuery());
            //this.assignSectorInstDepart(vo);
        } catch (Exception e) {
            log.error("Exception @getWhatsNewPolicys .. " + e);
        }
    }

    private void checkAssignApplicability(ViewObjectImpl polVO,
                                          int partitionType) {

        ArrayList<String> arrayList = new ArrayList<String>();


        String listSectorId = "";
        Row[] row = null;
        if (partitionType != 1) {

            String listId =
                "(".concat(this.getAllInString(polVO, "id").concat(")"));
            listId = listId.replace(",)", ")");
            log.info("List of institution id  : " + listId);
            if (partitionType == 2) {
                ViewObjectImpl voInst = this.getInstitutiontypeView1();
                voInst.setWhereClause("id IN " + listId);
                voInst.executeQuery();
                listSectorId = "(" + this.getAllInString(voInst, "SectorID");
                listSectorId = listSectorId.concat(")");
                listSectorId = listSectorId.replace(",)", ")");
                //row = voInst.getAllRowsInRange();
            } else if (partitionType == 3) {
                ViewObjectImpl voOrg = this.getOrganizationView1();
                voOrg.setWhereClause("id IN " + listId);
                voOrg.executeQuery();
                listSectorId = "(" + this.getAllInString(voOrg, "Sectorid");
                listSectorId = listSectorId.concat(")");
                listSectorId = listSectorId.replace(",)", ")");
                //row = voOrg.getAllRowsInRange();
            }
        } else {
            listSectorId = "(" + this.getAllInString(polVO, "ID");
            listSectorId = listSectorId.concat(")");
            listSectorId = listSectorId.replace(",)", ")");
        }

        log.info("Sector List  : " + listSectorId);
        if (listSectorId != "" && listSectorId != null) {
            ViewObjectImpl voSecDist = this.getSectorDistinct1();
            voSecDist.setWhereClause("SectorID IN " + listSectorId);
            voSecDist.executeQuery();
        }
    }


    private static String getAllInString(ViewObject vo, String attributeType) {
        String returnVal = "";
        vo.executeQuery();
        log.info("executeQuery::");
        while (vo.hasNext()) {
            Row row = vo.next();
            // DO what do you want in Row
            returnVal += "'" + row.getAttribute(attributeType) + "',";
        }
        //returnVal += ")";
        //returnVal = returnVal.replace(",)", ")");
        return returnVal;
    }

    private static String getAllCommaString(ViewObject vo,
                                            String attributeType) {
        String returnVal = "";
        vo.executeQuery();
        log.info("executeQuery::");
        while (vo.hasNext()) {
            Row row = vo.next();
            // DO what do you want in Row
            returnVal += row.getAttribute(attributeType) + ",";
        }
        //returnVal += ")";
        //returnVal = returnVal.replace(",)", ")");
        return returnVal;
    }

    public List<String> getAllSectorsInList() {

        List<String> listSector = new ArrayList<String>();
        ViewObjectImpl vo = this.getSectorsView1();
        vo.executeQuery();
        while (vo.hasNext()) {
            Row row = vo.next();
            listSector.add(String.valueOf(row.getAttribute("SectorName")));
        }
        return listSector;
    }

    /**
     * Container's getter for AttachedfileView1.
     * @return AttachedfileView1
     */
    public ViewObjectImpl getAttachedfileView1() {
        return (ViewObjectImpl)findViewObject("AttachedfileView1");
    }

    /**
     * Container's getter for BnmuserUsergroupView1.
     * @return BnmuserUsergroupView1
     */
    public ViewObjectImpl getBnmuserUsergroupView1() {
        return (ViewObjectImpl)findViewObject("BnmuserUsergroupView1");
    }

    /**
     * Container's getter for CategoriesView1.
     * @return CategoriesView1
     */
    public ViewObjectImpl getCategoriesView1() {
        return (ViewObjectImpl)findViewObject("CategoriesView1");
    }

    /**
     * Container's getter for DepartmentView1.
     * @return DepartmentView1
     */
    public ViewObjectImpl getDepartmentView1() {
        return (ViewObjectImpl)findViewObject("DepartmentView1");
    }


    /**
     * Container's getter for EnquiryfaqView1.
     * @return EnquiryfaqView1
     */
    public ViewObjectImpl getEnquiryfaqView1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqView1");
    }

    /**
     * Container's getter for ExternaluserView1.
     * @return ExternaluserView1
     */
    public ViewObjectImpl getExternaluserView1() {
        return (ViewObjectImpl)findViewObject("ExternaluserView1");
    }


    /**
     * Container's getter for FunctionUsergroupView1.
     * @return FunctionUsergroupView1
     */
    public ViewObjectImpl getFunctionUsergroupView1() {
        return (ViewObjectImpl)findViewObject("FunctionUsergroupView1");
    }

    /**
     * Container's getter for InstitutiontypeView1.
     * @return InstitutiontypeView1
     */
    public ViewObjectImpl getInstitutiontypeView1() {
        return (ViewObjectImpl)findViewObject("InstitutiontypeView1");
    }

    /**
     * Container's getter for ItemlistView1.
     * @return ItemlistView1
     */
    public ViewObjectImpl getItemlistView1() {
        return (ViewObjectImpl)findViewObject("ItemlistView1");
    }

    /**
     * Container's getter for ItemtypelistView1.
     * @return ItemtypelistView1
     */
    public ViewObjectImpl getItemtypelistView1() {
        return (ViewObjectImpl)findViewObject("ItemtypelistView1");
    }

    /**
     * Container's getter for L1browserView1.
     * @return L1browserView1
     */
    public ViewObjectImpl getL1browserView1() {
        return (ViewObjectImpl)findViewObject("L1browserView1");
    }

    /**
     * Container's getter for L2browserView1.
     * @return L2browserView1
     */
    public ViewObjectImpl getL2browserView1() {
        return (ViewObjectImpl)findViewObject("L2browserView1");
    }

    /**
     * Container's getter for L3browserView1.
     * @return L3browserView1
     */
    public ViewObjectImpl getL3browserView1() {
        return (ViewObjectImpl)findViewObject("L3browserView1");
    }

    /**
     * Container's getter for L4browserView1.
     * @return L4browserView1
     */
    public ViewObjectImpl getL4browserView1() {
        return (ViewObjectImpl)findViewObject("L4browserView1");
    }

    /**
     * Container's getter for LookuppropertiesView1.
     * @return LookuppropertiesView1
     */
    public ViewObjectImpl getLookuppropertiesView1() {
        return (ViewObjectImpl)findViewObject("LookuppropertiesView1");
    }

    /**
     * Container's getter for OrganizationView1.
     * @return OrganizationView1
     */
    public ViewObjectImpl getOrganizationView1() {
        return (ViewObjectImpl)findViewObject("OrganizationView1");
    }

    /**
     * Container's getter for PartitiontypelistView1.
     * @return PartitiontypelistView1
     */
    public ViewObjectImpl getPartitiontypelistView1() {
        return (ViewObjectImpl)findViewObject("PartitiontypelistView1");
    }

    /**
     * Container's getter for PcollControlView1.
     * @return PcollControlView1
     */
    public ViewObjectImpl getPcollControlView1() {
        return (ViewObjectImpl)findViewObject("PcollControlView1");
    }

    /**
     * Container's getter for PolicyView1.
     * @return PolicyView1
     */
    public ViewObjectImpl getPolicyView1() {
        return (ViewObjectImpl)findViewObject("PolicyView1");
    }

    /**
     * Container's getter for PolicyamendmentsView1.
     * @return PolicyamendmentsView1
     */
    public ViewObjectImpl getPolicyamendmentsView1() {
        return (ViewObjectImpl)findViewObject("PolicyamendmentsView1");
    }

    /**
     * Container's getter for PolicydepartmentpartitionView1.
     * @return PolicydepartmentpartitionView1
     */
    public ViewObjectImpl getPolicydepartmentpartitionView1() {
        return (ViewObjectImpl)findViewObject("PolicydepartmentpartitionView1");
    }

    /**
     * Container's getter for PolicyinstitutiontypepartitionView1.
     * @return PolicyinstitutiontypepartitionView1
     */
    public ViewObjectImpl getPolicyinstitutiontypepartitionView1() {
        return (ViewObjectImpl)findViewObject("PolicyinstitutiontypepartitionView1");
    }

    /**
     * Container's getter for PolicysectorcategoryView1.
     * @return PolicysectorcategoryView1
     */
    public ViewObjectImpl getPolicysectorcategoryView1() {
        return (ViewObjectImpl)findViewObject("PolicysectorcategoryView1");
    }

    /**
     * Container's getter for PsTxnView1.
     * @return PsTxnView1
     */
    public ViewObjectImpl getPsTxnView1() {
        return (ViewObjectImpl)findViewObject("PsTxnView1");
    }

    /**
     * Container's getter for SectorcategorysmeView1.
     * @return SectorcategorysmeView1
     */
    public ViewObjectImpl getSectorcategorysmeView1() {
        return (ViewObjectImpl)findViewObject("SectorcategorysmeView1");
    }

    /**
     * Container's getter for SectorsView1.
     * @return SectorsView1
     */
    public ViewObjectImpl getSectorsView1() {
        return (ViewObjectImpl)findViewObject("SectorsView1");
    }

    /**
     * Container's getter for TbladftokenView1.
     * @return TbladftokenView1
     */
    public ViewObjectImpl getTbladftokenView1() {
        return (ViewObjectImpl)findViewObject("TbladftokenView1");
    }

    /**
     * Container's getter for UserUsergroupView1.
     * @return UserUsergroupView1
     */
    public ViewObjectImpl getUserUsergroupView1() {
        return (ViewObjectImpl)findViewObject("UserUsergroupView1");
    }

    /**
     * Container's getter for UsergroupView1.
     * @return UsergroupView1
     */
    public ViewObjectImpl getUsergroupView1() {
        return (ViewObjectImpl)findViewObject("UsergroupView1");
    }

    /**
     * Container's getter for BnmuserUsergroupView2.
     * @return BnmuserUsergroupView2
     */
    public ViewObjectImpl getBnmuserUsergroupView2() {
        return (ViewObjectImpl)findViewObject("BnmuserUsergroupView2");
    }


    /**
     * Container's getter for FunctionUsergroupView2.
     * @return FunctionUsergroupView2
     */
    public ViewObjectImpl getFunctionUsergroupView2() {
        return (ViewObjectImpl)findViewObject("FunctionUsergroupView2");
    }

    /**
     * Container's getter for L2browserView2.
     * @return L2browserView2
     */
    public ViewObjectImpl getL2browserView2() {
        return (ViewObjectImpl)findViewObject("L2browserView2");
    }

    /**
     * Container's getter for L3browserView2.
     * @return L3browserView2
     */
    public ViewObjectImpl getL3browserView2() {
        return (ViewObjectImpl)findViewObject("L3browserView2");
    }

    /**
     * Container's getter for L4browserView2.
     * @return L4browserView2
     */
    public ViewObjectImpl getL4browserView2() {
        return (ViewObjectImpl)findViewObject("L4browserView2");
    }

    /**
     * Container's getter for ExternaluserView2.
     * @return ExternaluserView2
     */
    public ViewObjectImpl getExternaluserView2() {
        return (ViewObjectImpl)findViewObject("ExternaluserView2");
    }

    /**
     * Container's getter for EnquiryfaqView2.
     * @return EnquiryfaqView2
     */
    public ViewObjectImpl getEnquiryfaqView2() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqView2");
    }

    /**
     * Container's getter for PolicyView2.
     * @return PolicyView2
     */
    public ViewObjectImpl getPolicyView2() {
        return (ViewObjectImpl)findViewObject("PolicyView2");
    }

    /**
     * Container's getter for EnquiryfaqView3.
     * @return EnquiryfaqView3
     */
    public ViewObjectImpl getEnquiryfaqView3() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqView3");
    }

    /**
     * Container's getter for PolicydepartmentpartitionView2.
     * @return PolicydepartmentpartitionView2
     */
    public ViewObjectImpl getPolicydepartmentpartitionView2() {
        return (ViewObjectImpl)findViewObject("PolicydepartmentpartitionView2");
    }

    /**
     * Container's getter for PolicydepartmentpartitionView3.
     * @return PolicydepartmentpartitionView3
     */
    public ViewObjectImpl getPolicydepartmentpartitionView3() {
        return (ViewObjectImpl)findViewObject("PolicydepartmentpartitionView3");
    }

    /**
     * Container's getter for PolicyinstitutiontypepartitionView2.
     * @return PolicyinstitutiontypepartitionView2
     */
    public ViewObjectImpl getPolicyinstitutiontypepartitionView2() {
        return (ViewObjectImpl)findViewObject("PolicyinstitutiontypepartitionView2");
    }

    /**
     * Container's getter for PolicysectorcategoryView2.
     * @return PolicysectorcategoryView2
     */
    public ViewObjectImpl getPolicysectorcategoryView2() {
        return (ViewObjectImpl)findViewObject("PolicysectorcategoryView2");
    }

    /**
     * Container's getter for PolicysectorcategoryView3.
     * @return PolicysectorcategoryView3
     */
    public ViewObjectImpl getPolicysectorcategoryView3() {
        return (ViewObjectImpl)findViewObject("PolicysectorcategoryView3");
    }


    /**
     * Container's getter for SectorcategorysmeView2.
     * @return SectorcategorysmeView2
     */
    public ViewObjectImpl getSectorcategorysmeView2() {
        return (ViewObjectImpl)findViewObject("SectorcategorysmeView2");
    }

    /**
     * Container's getter for PolicysectorcategoryView4.
     * @return PolicysectorcategoryView4
     */
    public ViewObjectImpl getPolicysectorcategoryView4() {
        return (ViewObjectImpl)findViewObject("PolicysectorcategoryView4");
    }

    /**
     * Container's getter for SectorcategorysmeView3.
     * @return SectorcategorysmeView3
     */
    public ViewObjectImpl getSectorcategorysmeView3() {
        return (ViewObjectImpl)findViewObject("SectorcategorysmeView3");
    }

    /**
     * Container's getter for ExternaluserView3.
     * @return ExternaluserView3
     */
    public ViewObjectImpl getExternaluserView3() {
        return (ViewObjectImpl)findViewObject("ExternaluserView3");
    }


    /**
     * Container's getter for OrganizationView2.
     * @return OrganizationView2
     */
    public ViewObjectImpl getOrganizationView2() {
        return (ViewObjectImpl)findViewObject("OrganizationView2");
    }

    /**
     * Container's getter for FunctionUsergroupView3.
     * @return FunctionUsergroupView3
     */
    public ViewObjectImpl getFunctionUsergroupView3() {
        return (ViewObjectImpl)findViewObject("FunctionUsergroupView3");
    }

    /**
     * Container's getter for BnmuserUsergroupView3.
     * @return BnmuserUsergroupView3
     */
    public ViewObjectImpl getBnmuserUsergroupView3() {
        return (ViewObjectImpl)findViewObject("BnmuserUsergroupView3");
    }

    /**
     * Container's getter for UserUsergroupView2.
     * @return UserUsergroupView2
     */
    public ViewObjectImpl getUserUsergroupView2() {
        return (ViewObjectImpl)findViewObject("UserUsergroupView2");
    }

    /**
     * Container's getter for UserUsergroupView3.
     * @return UserUsergroupView3
     */
    public ViewObjectImpl getUserUsergroupView3() {
        return (ViewObjectImpl)findViewObject("UserUsergroupView3");
    }

    /**
     * Container's getter for AttachedfileView2.
     * @return AttachedfileView2
     */
    public ViewObjectImpl getAttachedfileView2() {
        return (ViewObjectImpl)findViewObject("AttachedfileView2");
    }

    /**
     * Container's getter for AttachedfileView3.
     * @return AttachedfileView3
     */
    public ViewObjectImpl getAttachedfileView3() {
        return (ViewObjectImpl)findViewObject("AttachedfileView3");
    }

    /**
     * Container's getter for OrganizationView3.
     * @return OrganizationView3
     */
    public ViewObjectImpl getOrganizationView3() {
        return (ViewObjectImpl)findViewObject("OrganizationView3");
    }

    /**
     * Container's getter for PolicyinstitutiontypepartitionView3.
     * @return PolicyinstitutiontypepartitionView3
     */
    public ViewObjectImpl getPolicyinstitutiontypepartitionView3() {
        return (ViewObjectImpl)findViewObject("PolicyinstitutiontypepartitionView3");
    }

    /**
     * Container's getter for InstitutiontypeView2.
     * @return InstitutiontypeView2
     */
    public ViewObjectImpl getInstitutiontypeView2() {
        return (ViewObjectImpl)findViewObject("InstitutiontypeView2");
    }

    /**
     * Container's getter for PolicyView3.
     * @return PolicyView3
     */
    public ViewObjectImpl getPolicyView3() {
        return (ViewObjectImpl)findViewObject("PolicyView3");
    }

    /**
     * Container's getter for L4browserView3.
     * @return L4browserView3
     */
    public ViewObjectImpl getL4browserView3() {
        return (ViewObjectImpl)findViewObject("L4browserView3");
    }

    /**
     * Container's getter for L2browserView3.
     * @return L2browserView3
     */
    public ViewObjectImpl getL2browserView3() {
        return (ViewObjectImpl)findViewObject("L2browserView3");
    }

    /**
     * Container's getter for L3browserView3.
     * @return L3browserView3
     */
    public ViewObjectImpl getL3browserView3() {
        return (ViewObjectImpl)findViewObject("L3browserView3");
    }

    /**
     * Container's getter for L1browserView2.
     * @return L1browserView2
     */
    public ViewObjectImpl getL1browserView2() {
        return (ViewObjectImpl)findViewObject("L1browserView2");
    }

    /**
     * Container's getter for ItemtypelistView2.
     * @return ItemtypelistView2
     */
    public ViewObjectImpl getItemtypelistView2() {
        return (ViewObjectImpl)findViewObject("ItemtypelistView2");
    }


    /**
     * Container's getter for BNMUSERUSERGROUPBNMUSERFK1Link1.
     * @return BNMUSERUSERGROUPBNMUSERFK1Link1
     */
    public ViewLinkImpl getBNMUSERUSERGROUPBNMUSERFK1Link1() {
        return (ViewLinkImpl)findViewLink("BNMUSERUSERGROUPBNMUSERFK1Link1");
    }

    /**
     * Container's getter for BNMUSERDEPARTMENTFK1Link1.
     * @return BNMUSERDEPARTMENTFK1Link1
     */
    public ViewLinkImpl getBNMUSERDEPARTMENTFK1Link1() {
        return (ViewLinkImpl)findViewLink("BNMUSERDEPARTMENTFK1Link1");
    }


    /**
     * Container's getter for FUNCTIONUSERGROUPFUNCTIONFK1Link1.
     * @return FUNCTIONUSERGROUPFUNCTIONFK1Link1
     */
    public ViewLinkImpl getFUNCTIONUSERGROUPFUNCTIONFK1Link1() {
        return (ViewLinkImpl)findViewLink("FUNCTIONUSERGROUPFUNCTIONFK1Link1");
    }

    /**
     * Container's getter for L2BrowserL1BrowserFKLink1.
     * @return L2BrowserL1BrowserFKLink1
     */
    public ViewLinkImpl getL2BrowserL1BrowserFKLink1() {
        return (ViewLinkImpl)findViewLink("L2BrowserL1BrowserFKLink1");
    }

    /**
     * Container's getter for L3BrowserL2BrowserFKLink1.
     * @return L3BrowserL2BrowserFKLink1
     */
    public ViewLinkImpl getL3BrowserL2BrowserFKLink1() {
        return (ViewLinkImpl)findViewLink("L3BrowserL2BrowserFKLink1");
    }

    /**
     * Container's getter for L4BrowserL3BrowserFKLink1.
     * @return L4BrowserL3BrowserFKLink1
     */
    public ViewLinkImpl getL4BrowserL3BrowserFKLink1() {
        return (ViewLinkImpl)findViewLink("L4BrowserL3BrowserFKLink1");
    }

    /**
     * Container's getter for EXTERNALUSEROrganizationFK1Link1.
     * @return EXTERNALUSEROrganizationFK1Link1
     */
    public ViewLinkImpl getEXTERNALUSEROrganizationFK1Link1() {
        return (ViewLinkImpl)findViewLink("EXTERNALUSEROrganizationFK1Link1");
    }


    /**
     * Container's getter for PolicyPartitionTypeListFKLink1.
     * @return PolicyPartitionTypeListFKLink1
     */
    public ViewLinkImpl getPolicyPartitionTypeListFKLink1() {
        return (ViewLinkImpl)findViewLink("PolicyPartitionTypeListFKLink1");
    }

    /**
     * Container's getter for PolicyDepartmentPartitionDEPARTMENTFK1Link1.
     * @return PolicyDepartmentPartitionDEPARTMENTFK1Link1
     */
    public ViewLinkImpl getPolicyDepartmentPartitionDEPARTMENTFK1Link1() {
        return (ViewLinkImpl)findViewLink("PolicyDepartmentPartitionDEPARTMENTFK1Link1");
    }

    /**
     * Container's getter for PolicyDepartmentPartitionFKLink1.
     * @return PolicyDepartmentPartitionFKLink1
     */
    public ViewLinkImpl getPolicyDepartmentPartitionFKLink1() {
        return (ViewLinkImpl)findViewLink("PolicyDepartmentPartitionFKLink1");
    }

    /**
     * Container's getter for PolicyInstitutionTypePartiFK1Link1.
     * @return PolicyInstitutionTypePartiFK1Link1
     */
    public ViewLinkImpl getPolicyInstitutionTypePartiFK1Link1() {
        return (ViewLinkImpl)findViewLink("PolicyInstitutionTypePartiFK1Link1");
    }

    /**
     * Container's getter for FKPolicySectorCategoryCategoriesLink1.
     * @return FKPolicySectorCategoryCategoriesLink1
     */
    public ViewLinkImpl getFKPolicySectorCategoryCategoriesLink1() {
        return (ViewLinkImpl)findViewLink("FKPolicySectorCategoryCategoriesLink1");
    }

    /**
     * Container's getter for PolicySectorCategoryPolicyFK1Link1.
     * @return PolicySectorCategoryPolicyFK1Link1
     */
    public ViewLinkImpl getPolicySectorCategoryPolicyFK1Link1() {
        return (ViewLinkImpl)findViewLink("PolicySectorCategoryPolicyFK1Link1");
    }

    /**
     * Container's getter for FKPolicySectorCategorySectorsLink1.
     * @return FKPolicySectorCategorySectorsLink1
     */
    public ViewLinkImpl getFKPolicySectorCategorySectorsLink1() {
        return (ViewLinkImpl)findViewLink("FKPolicySectorCategorySectorsLink1");
    }

    /**
     * Container's getter for FUNCTIONUSERGROUPUSERGROUPFK1Link1.
     * @return FUNCTIONUSERGROUPUSERGROUPFK1Link1
     */
    public ViewLinkImpl getFUNCTIONUSERGROUPUSERGROUPFK1Link1() {
        return (ViewLinkImpl)findViewLink("FUNCTIONUSERGROUPUSERGROUPFK1Link1");
    }

    /**
     * Container's getter for BNMUSERUSERGROUPUSERGROUPFK1Link1.
     * @return BNMUSERUSERGROUPUSERGROUPFK1Link1
     */
    public ViewLinkImpl getBNMUSERUSERGROUPUSERGROUPFK1Link1() {
        return (ViewLinkImpl)findViewLink("BNMUSERUSERGROUPUSERGROUPFK1Link1");
    }

    /**
     * Container's getter for USERUSERGROUPEXTERNALUSERFK1Link1.
     * @return USERUSERGROUPEXTERNALUSERFK1Link1
     */
    public ViewLinkImpl getUSERUSERGROUPEXTERNALUSERFK1Link1() {
        return (ViewLinkImpl)findViewLink("USERUSERGROUPEXTERNALUSERFK1Link1");
    }

    /**
     * Container's getter for USERUSERGROUPUSERGROUPFK1Link1.
     * @return USERUSERGROUPUSERGROUPFK1Link1
     */
    public ViewLinkImpl getUSERUSERGROUPUSERGROUPFK1Link1() {
        return (ViewLinkImpl)findViewLink("USERUSERGROUPUSERGROUPFK1Link1");
    }

    /**
     * Container's getter for attachedFilePolicyFKLink1.
     * @return attachedFilePolicyFKLink1
     */
    public ViewLinkImpl getattachedFilePolicyFKLink1() {
        return (ViewLinkImpl)findViewLink("attachedFilePolicyFKLink1");
    }


    /**
     * Container's getter for PolicyInstitutionTypePartitFKLink1.
     * @return PolicyInstitutionTypePartitFKLink1
     */
    public ViewLinkImpl getPolicyInstitutionTypePartitFKLink1() {
        return (ViewLinkImpl)findViewLink("PolicyInstitutionTypePartitFKLink1");
    }

    /**
     * Container's getter for institutionTypeSectorsFK1Link1.
     * @return institutionTypeSectorsFK1Link1
     */
    public ViewLinkImpl getinstitutionTypeSectorsFK1Link1() {
        return (ViewLinkImpl)findViewLink("institutionTypeSectorsFK1Link1");
    }

    /**
     * Container's getter for PolicyitemListFKLink1.
     * @return PolicyitemListFKLink1
     */
    public ViewLinkImpl getPolicyitemListFKLink1() {
        return (ViewLinkImpl)findViewLink("PolicyitemListFKLink1");
    }

    /**
     * Container's getter for L4BrowseritemListFKLink1.
     * @return L4BrowseritemListFKLink1
     */
    public ViewLinkImpl getL4BrowseritemListFKLink1() {
        return (ViewLinkImpl)findViewLink("L4BrowseritemListFKLink1");
    }

    /**
     * Container's getter for L2BrowseritemListFKLink1.
     * @return L2BrowseritemListFKLink1
     */
    public ViewLinkImpl getL2BrowseritemListFKLink1() {
        return (ViewLinkImpl)findViewLink("L2BrowseritemListFKLink1");
    }

    /**
     * Container's getter for L3BrowseritemListFKLink1.
     * @return L3BrowseritemListFKLink1
     */
    public ViewLinkImpl getL3BrowseritemListFKLink1() {
        return (ViewLinkImpl)findViewLink("L3BrowseritemListFKLink1");
    }

    /**
     * Container's getter for L1BrowseritemListFKLink1.
     * @return L1BrowseritemListFKLink1
     */
    public ViewLinkImpl getL1BrowseritemListFKLink1() {
        return (ViewLinkImpl)findViewLink("L1BrowseritemListFKLink1");
    }

    /**
     * Container's getter for itemTypeListitemListFKLink1.
     * @return itemTypeListitemListFKLink1
     */
    public ViewLinkImpl getitemTypeListitemListFKLink1() {
        return (ViewLinkImpl)findViewLink("itemTypeListitemListFKLink1");
    }


    /**
     * Container's getter for ClassificationView1.
     * @return ClassificationView1
     */
    public ViewObjectImpl getClassificationView1() {
        return (ViewObjectImpl)findViewObject("ClassificationView1");
    }

    /**
     * Container's getter for DoccategoryView1.
     * @return DoccategoryView1
     */
    public ViewObjectImpl getDoccategoryView1() {
        return (ViewObjectImpl)findViewObject("DoccategoryView1");
    }

    /**
     * Container's getter for Policybusinesssectorpartition1View1.
     * @return Policybusinesssectorpartition1View1
     */
    public ViewObjectImpl getPolicybusinesssectorpartition1View1() {
        return (ViewObjectImpl)findViewObject("Policybusinesssectorpartition1View1");
    }

    /**
     * Container's getter for PolicyorganizationpartitionView1.
     * @return PolicyorganizationpartitionView1
     */
    public ViewObjectImpl getPolicyorganizationpartitionView1() {
        return (ViewObjectImpl)findViewObject("PolicyorganizationpartitionView1");
    }

    /**
     * Container's getter for SectorsView2.
     * @return SectorsView2
     */
    public ViewObjectImpl getSectorsView2() {
        return (ViewObjectImpl)findViewObject("SectorsView2");
    }

    /**
     * Container's getter for Policybusinesssectorpartition1View2.
     * @return Policybusinesssectorpartition1View2
     */
    public ViewObjectImpl getPolicybusinesssectorpartition1View2() {
        return (ViewObjectImpl)findViewObject("Policybusinesssectorpartition1View2");
    }

    /**
     * Container's getter for Policybusinesssectorpartition1Sector.
     * @return Policybusinesssectorpartition1Sector
     */
    public ViewLinkImpl getPolicybusinesssectorpartition1Sector() {
        return (ViewLinkImpl)findViewLink("Policybusinesssectorpartition1Sector");
    }

    /**
     * Container's getter for SectorsView3.
     * @return SectorsView3
     */
    public ViewObjectImpl getSectorsView3() {
        return (ViewObjectImpl)findViewObject("SectorsView3");
    }

    /**
     * Container's getter for OrganizationView4.
     * @return OrganizationView4
     */
    public ViewObjectImpl getOrganizationView4() {
        return (ViewObjectImpl)findViewObject("OrganizationView4");
    }

    /**
     * Container's getter for OrganizationSectorsViewLink.
     * @return OrganizationSectorsViewLink
     */
    public ViewLinkImpl getOrganizationSectorsViewLink() {
        return (ViewLinkImpl)findViewLink("OrganizationSectorsViewLink");
    }

    /**
     * Container's getter for InstitutiontypeView3.
     * @return InstitutiontypeView3
     */
    public ViewObjectImpl getInstitutiontypeView3() {
        return (ViewObjectImpl)findViewObject("InstitutiontypeView3");
    }

    /**
     * Container's getter for OrganizationView5.
     * @return OrganizationView5
     */
    public ViewObjectImpl getOrganizationView5() {
        return (ViewObjectImpl)findViewObject("OrganizationView5");
    }

    /**
     * Container's getter for OrganizationInstitutiontypeViewLink.
     * @return OrganizationInstitutiontypeViewLink
     */
    public ViewLinkImpl getOrganizationInstitutiontypeViewLink() {
        return (ViewLinkImpl)findViewLink("OrganizationInstitutiontypeViewLink");
    }

    /**
     * Container's getter for OrganizationView6.
     * @return OrganizationView6
     */
    public ViewObjectImpl getOrganizationView6() {
        return (ViewObjectImpl)findViewObject("OrganizationView6");
    }

    /**
     * Container's getter for PolicyorganizationpartitionView2.
     * @return PolicyorganizationpartitionView2
     */
    public ViewObjectImpl getPolicyorganizationpartitionView2() {
        return (ViewObjectImpl)findViewObject("PolicyorganizationpartitionView2");
    }

    /**
     * Container's getter for PolicyorganizationpartitionOrganizationViewLink.
     * @return PolicyorganizationpartitionOrganizationViewLink
     */
    public ViewLinkImpl getPolicyorganizationpartitionOrganizationViewLink() {
        return (ViewLinkImpl)findViewLink("PolicyorganizationpartitionOrganizationViewLink");
    }

    /**
     * Container's getter for SectorsView4.
     * @return SectorsView4
     */
    public ViewObjectImpl getSectorsView4() {
        return (ViewObjectImpl)findViewObject("SectorsView4");
    }

    /**
     * Container's getter for InstitutiontypeView4.
     * @return InstitutiontypeView4
     */
    public ViewObjectImpl getInstitutiontypeView4() {
        return (ViewObjectImpl)findViewObject("InstitutiontypeView4");
    }

    /**
     * Container's getter for InstitutionTypeSectorsViewLink.
     * @return InstitutionTypeSectorsViewLink
     */
    public ViewLinkImpl getInstitutionTypeSectorsViewLink() {
        return (ViewLinkImpl)findViewLink("InstitutionTypeSectorsViewLink");
    }

    /**
     * Container's getter for AttachedfileView2_1.
     * @return AttachedfileView2_1
     */
    public ViewObjectImpl getAttachedfileView2_1() {
        return (ViewObjectImpl)findViewObject("AttachedfileView2_1");
    }


    /**
     * Container's getter for AttachedfileEx1View1.
     * @return AttachedfileEx1View1
     */
    public ViewObjectImpl getAttachedfileEx1View1() {
        return (ViewObjectImpl)findViewObject("AttachedfileEx1View1");
    }

    /**
     * Container's getter for SuperseededpoliciesView1.
     * @return SuperseededpoliciesView1
     */
    public ViewObjectImpl getSuperseededpoliciesView1() {
        return (ViewObjectImpl)findViewObject("SuperseededpoliciesView1");
    }

    /**
     * Container's getter for ItemlistView2.
     * @return ItemlistView2
     */
    public ViewObjectImpl getItemlistView2() {
        return (ViewObjectImpl)findViewObject("ItemlistView2");
    }

    /**
     * Container's getter for SuperseededpoliciesView2.
     * @return SuperseededpoliciesView2
     */
    public ViewObjectImpl getSuperseededpoliciesView2() {
        return (ViewObjectImpl)findViewObject("SuperseededpoliciesView2");
    }


    /**
     * Container's getter for PolicyActiveOnlyViewObj1.
     * @return PolicyActiveOnlyViewObj1
     */
    public ViewObjectImpl getPolicyActiveOnlyViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyActiveOnlyViewObj1");
    }

    /**
     * Container's getter for PolicyamendmentHistoryViewObj1.
     * @return PolicyamendmentHistoryViewObj1
     */
    public ViewObjectImpl getPolicyamendmentHistoryViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyamendmentHistoryViewObj1");
    }

    /**
     * Container's getter for PolicybnmuserspartitionView1.
     * @return PolicybnmuserspartitionView1
     */
    public ViewObjectImpl getPolicybnmuserspartitionView1() {
        return (ViewObjectImpl)findViewObject("PolicybnmuserspartitionView1");
    }


    /**
     * Container's getter for PolicybnmuserspartitionView2.
     * @return PolicybnmuserspartitionView2
     */
    public ViewObjectImpl getPolicybnmuserspartitionView2() {
        return (ViewObjectImpl)findViewObject("PolicybnmuserspartitionView2");
    }

    /**
     * Container's getter for PolicybnmuserspartitionView3.
     * @return PolicybnmuserspartitionView3
     */
    public ViewObjectImpl getPolicybnmuserspartitionView3() {
        return (ViewObjectImpl)findViewObject("PolicybnmuserspartitionView3");
    }

    /**
     * Container's getter for PolicybnmuserspartitionBnmuserViewLink.
     * @return PolicybnmuserspartitionBnmuserViewLink
     */
    public ViewLinkImpl getPolicybnmuserspartitionBnmuserViewLink() {
        return (ViewLinkImpl)findViewLink("PolicybnmuserspartitionBnmuserViewLink");
    }

    /**
     * Container's getter for EnquiryfaqForFaqView1.
     * @return EnquiryfaqForFaqView1
     */
    public ViewObjectImpl getEnquiryfaqForFaqView1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForFaqView1");
    }

    /**
     * Container's getter for PolicyView4.
     * @return PolicyView4
     */
    public ViewObjectImpl getPolicyView4() {
        return (ViewObjectImpl)findViewObject("PolicyView4");
    }

    /**
     * Container's getter for EnquiryfaqForFaqView2.
     * @return EnquiryfaqForFaqView2
     */
    public ViewObjectImpl getEnquiryfaqForFaqView2() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForFaqView2");
    }

    /**
     * Container's getter for EnquiryfaqForFaqPolicyFK1ViewLink.
     * @return EnquiryfaqForFaqPolicyFK1ViewLink
     */
    public ViewLinkImpl getEnquiryfaqForFaqPolicyFK1ViewLink() {
        return (ViewLinkImpl)findViewLink("EnquiryfaqForFaqPolicyFK1ViewLink");
    }

    /**
     * Container's getter for PolicyView5.
     * @return PolicyView5
     */
    public ViewObjectImpl getPolicyView5() {
        return (ViewObjectImpl)findViewObject("PolicyView5");
    }

    /**
     * Container's getter for EnquiryfaqPolicyFK1ViewLink.
     * @return EnquiryfaqPolicyFK1ViewLink
     */
    public ViewLinkImpl getEnquiryfaqPolicyFK1ViewLink() {
        return (ViewLinkImpl)findViewLink("EnquiryfaqPolicyFK1ViewLink");
    }

    /**
     * Container's getter for EnquiryfaqForFaqManView1.
     * @return EnquiryfaqForFaqManView1
     */
    public ViewObjectImpl getEnquiryfaqForFaqManView1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForFaqManView1");
    }

    /**
     * Container's getter for ItemlistView3.
     * @return ItemlistView3
     */
    public ViewObjectImpl getItemlistView3() {
        return (ViewObjectImpl)findViewObject("ItemlistView3");
    }

    /**
     * Container's getter for EnquiryfaqForFaqManView2.
     * @return EnquiryfaqForFaqManView2
     */
    public ViewObjectImpl getEnquiryfaqForFaqManView2() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForFaqManView2");
    }


    /**
     * Container's getter for PolicyView6.
     * @return PolicyView6
     */
    public ViewObjectImpl getPolicyView6() {
        return (ViewObjectImpl)findViewObject("PolicyView6");
    }

    /**
     * Container's getter for EnquiryfaqForFaqManView3.
     * @return EnquiryfaqForFaqManView3
     */
    public ViewObjectImpl getEnquiryfaqForFaqManView3() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForFaqManView3");
    }


    /**
     * Container's getter for EnquiryfaqForFaqManPolicyViewLink.
     * @return EnquiryfaqForFaqManPolicyViewLink
     */
    public ViewLinkImpl getEnquiryfaqForFaqManPolicyViewLink() {
        return (ViewLinkImpl)findViewLink("EnquiryfaqForFaqManPolicyViewLink");
    }

    /**
     * Container's getter for PolicyView7.
     * @return PolicyView7
     */
    public ViewObjectImpl getPolicyView7() {
        return (ViewObjectImpl)findViewObject("PolicyView7");
    }

    /**
     * Container's getter for SuperseededpoliciesView3.
     * @return SuperseededpoliciesView3
     */
    public ViewObjectImpl getSuperseededpoliciesView3() {
        return (ViewObjectImpl)findViewObject("SuperseededpoliciesView3");
    }

    /**
     * Container's getter for SuperseededPoliciesPolicyViewLink.
     * @return SuperseededPoliciesPolicyViewLink
     */
    public ViewLinkImpl getSuperseededPoliciesPolicyViewLink() {
        return (ViewLinkImpl)findViewLink("SuperseededPoliciesPolicyViewLink");
    }

    /**
     * Container's getter for PolicyArchiveOnly1.
     * @return PolicyArchiveOnly1
     */
    public ViewObjectImpl getPolicyArchiveOnly1() {
        return (ViewObjectImpl)findViewObject("PolicyArchiveOnly1");
    }

    /**
     * Container's getter for EnquiryfaqForEnqViewObj1.
     * @return EnquiryfaqForEnqViewObj1
     */
    public ViewObjectImpl getEnquiryfaqForEnqViewObj1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForEnqViewObj1");
    }

    /**
     * Container's getter for EnquiryfaqForEnqPendingViewObj1.
     * @return EnquiryfaqForEnqPendingViewObj1
     */
    public ViewObjectImpl getEnquiryfaqForEnqPendingViewObj1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForEnqPendingViewObj1");
    }

    /**
     * Container's getter for PolicyView8.
     * @return PolicyView8
     */
    public ViewObjectImpl getPolicyView8() {
        return (ViewObjectImpl)findViewObject("PolicyView8");
    }

    /**
     * Container's getter for EnquiryfaqForEnqPendingViewObj2.
     * @return EnquiryfaqForEnqPendingViewObj2
     */
    public ViewObjectImpl getEnquiryfaqForEnqPendingViewObj2() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForEnqPendingViewObj2");
    }

    /**
     * Container's getter for EnquiryfaqForEnqPendingPolicyViewLink.
     * @return EnquiryfaqForEnqPendingPolicyViewLink
     */
    public ViewLinkImpl getEnquiryfaqForEnqPendingPolicyViewLink() {
        return (ViewLinkImpl)findViewLink("EnquiryfaqForEnqPendingPolicyViewLink");
    }

    /**
     * Container's getter for PolicyView9.
     * @return PolicyView9
     */
    public ViewObjectImpl getPolicyView9() {
        return (ViewObjectImpl)findViewObject("PolicyView9");
    }

    /**
     * Container's getter for EnquiryfaqForEnqViewObj2.
     * @return EnquiryfaqForEnqViewObj2
     */
    public ViewObjectImpl getEnquiryfaqForEnqViewObj2() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForEnqViewObj2");
    }

    /**
     * Container's getter for EnquiryfaqForEnqPolicyViewLink.
     * @return EnquiryfaqForEnqPolicyViewLink
     */
    public ViewLinkImpl getEnquiryfaqForEnqPolicyViewLink() {
        return (ViewLinkImpl)findViewLink("EnquiryfaqForEnqPolicyViewLink");
    }

    /**
     * Container's getter for EnquiryfaqForEnqPolicyViewObj1.
     * @return EnquiryfaqForEnqPolicyViewObj1
     */
    public ViewObjectImpl getEnquiryfaqForEnqPolicyViewObj1() {
        return (ViewObjectImpl)findViewObject("EnquiryfaqForEnqPolicyViewObj1");
    }

    /**
     * Container's getter for AttachedfileSupportDocViewObj1.
     * @return AttachedfileSupportDocViewObj1
     */
    public ViewObjectImpl getAttachedfileSupportDocViewObj1() {
        return (ViewObjectImpl)findViewObject("AttachedfileSupportDocViewObj1");
    }

    /**
     * Container's getter for PolicyAgingReportViewObj1.
     * @return PolicyAgingReportViewObj1
     */
    public ViewObjectImpl getPolicyAgingReportViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyAgingReportViewObj1");
    }

    /**
     * Container's getter for PolicycategoriespartitionView1.
     * @return PolicycategoriespartitionView1
     */
    public ViewObjectImpl getPolicycategoriespartitionView1() {
        return (ViewObjectImpl)findViewObject("PolicycategoriespartitionView1");
    }

    /**
     * Container's getter for CategoriesView2.
     * @return CategoriesView2
     */
    public ViewObjectImpl getCategoriesView2() {
        return (ViewObjectImpl)findViewObject("CategoriesView2");
    }

    /**
     * Container's getter for PolicycategoriespartitionView2.
     * @return PolicycategoriespartitionView2
     */
    public ViewObjectImpl getPolicycategoriespartitionView2() {
        return (ViewObjectImpl)findViewObject("PolicycategoriespartitionView2");
    }

    /**
     * Container's getter for PolicyCategoriesPartitionCategoriesViewLink.
     * @return PolicyCategoriesPartitionCategoriesViewLink
     */
    public ViewLinkImpl getPolicyCategoriesPartitionCategoriesViewLink() {
        return (ViewLinkImpl)findViewLink("PolicyCategoriesPartitionCategoriesViewLink");
    }

    /**
     * Container's getter for CategoriesView3.
     * @return CategoriesView3
     */
    public ViewObjectImpl getCategoriesView3() {
        return (ViewObjectImpl)findViewObject("CategoriesView3");
    }

    /**
     * Container's getter for CategoriesView4.
     * @return CategoriesView4
     */
    public ViewObjectImpl getCategoriesView4() {
        return (ViewObjectImpl)findViewObject("CategoriesView4");
    }


    /**
     * Container's getter for CategoriesView6.
     * @return CategoriesView6
     */
    public ViewObjectImpl getCategoriesView6() {
        return (ViewObjectImpl)findViewObject("CategoriesView6");
    }


    /**
     * Container's getter for CategoryParentLevelViewObj1.
     * @return CategoryParentLevelViewObj1
     */
    public ViewObjectImpl getCategoryParentLevelViewObj1() {
        return (ViewObjectImpl)findViewObject("CategoryParentLevelViewObj1");
    }

    /**
     * Container's getter for CategoriesView7.
     * @return CategoriesView7
     */
    public ViewObjectImpl getCategoriesView7() {
        return (ViewObjectImpl)findViewObject("CategoriesView7");
    }

    /**
     * Container's getter for CategoryParentLevelViewObj2.
     * @return CategoryParentLevelViewObj2
     */
    public ViewObjectImpl getCategoryParentLevelViewObj2() {
        return (ViewObjectImpl)findViewObject("CategoryParentLevelViewObj2");
    }

    /**
     * Container's getter for CategoryParentIdLevelViewLink.
     * @return CategoryParentIdLevelViewLink
     */
    public ViewLinkImpl getCategoryParentIdLevelViewLink() {
        return (ViewLinkImpl)findViewLink("CategoryParentIdLevelViewLink");
    }

    /**
     * Container's getter for AttachedFileOnlyPdfViewObj1.
     * @return AttachedFileOnlyPdfViewObj1
     */
    public ViewObjectImpl getAttachedFileOnlyPdfViewObj1() {
        return (ViewObjectImpl)findViewObject("AttachedFileOnlyPdfViewObj1");
    }

    /**
     * Container's getter for CommunityView1.
     * @return CommunityView1
     */
    public ViewObjectImpl getCommunityView1() {
        return (ViewObjectImpl)findViewObject("CommunityView1");
    }

    /**
     * Container's getter for InternaluserView1.
     * @return InternaluserView1
     */
    public ViewObjectImpl getInternaluserView1() {
        return (ViewObjectImpl)findViewObject("InternaluserView1");
    }

    /**
     * Container's getter for InternaluserUsergroupView1.
     * @return InternaluserUsergroupView1
     */
    public ViewObjectImpl getInternaluserUsergroupView1() {
        return (ViewObjectImpl)findViewObject("InternaluserUsergroupView1");
    }

    /**
     * Container's getter for UserfunctionView1.
     * @return UserfunctionView1
     */
    public ViewObjectImpl getUserfunctionView1() {
        return (ViewObjectImpl)findViewObject("UserfunctionView1");
    }

    /**
     * Container's getter for InternaluserView2.
     * @return InternaluserView2
     */
    public ViewObjectImpl getInternaluserView2() {
        return (ViewObjectImpl)findViewObject("InternaluserView2");
    }

    /**
     * Container's getter for PolicybnmuserspartitionView4.
     * @return PolicybnmuserspartitionView4
     */
    public ViewObjectImpl getPolicybnmuserspartitionView4() {
        return (ViewObjectImpl)findViewObject("PolicybnmuserspartitionView4");
    }

    /**
     * Container's getter for PolicybnmuserspartitionInternaluserViewLink.
     * @return PolicybnmuserspartitionInternaluserViewLink
     */
    public ViewLinkImpl getPolicybnmuserspartitionInternaluserViewLink() {
        return (ViewLinkImpl)findViewLink("PolicybnmuserspartitionInternaluserViewLink");
    }

    /**
     * Container's getter for PolicyPartitionCompViewObj1.
     * @return PolicyPartitionCompViewObj1
     */
    public ViewObjectImpl getPolicyPartitionCompViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyPartitionCompViewObj1");
    }

    /**
     * Container's getter for PolicycategoriespartitionView3.
     * @return PolicycategoriespartitionView3
     */
    public ViewObjectImpl getPolicycategoriespartitionView3() {
        return (ViewObjectImpl)findViewObject("PolicycategoriespartitionView3");
    }

    /**
     * Container's getter for CategoriesView5.
     * @return CategoriesView5
     */
    public ViewObjectImpl getCategoriesView5() {
        return (ViewObjectImpl)findViewObject("CategoriesView5");
    }

    /**
     * Container's getter for PolicyCateogyCountViewLink.
     * @return PolicyCateogyCountViewLink
     */
    public ViewLinkImpl getPolicyCateogyCountViewLink() {
        return (ViewLinkImpl)findViewLink("PolicyCateogyCountViewLink");
    }

    /**
     * Container's getter for CategoriesView8.
     * @return CategoriesView8
     */
    public ViewObjectImpl getCategoriesView8() {
        return (ViewObjectImpl)findViewObject("CategoriesView8");
    }

    /**
     * Container's getter for PolicycategoriespartitionView4.
     * @return PolicycategoriespartitionView4
     */
    public ViewObjectImpl getPolicycategoriespartitionView4() {
        return (ViewObjectImpl)findViewObject("PolicycategoriespartitionView4");
    }

    /**
     * Container's getter for PolicyCategoryCountViewLink.
     * @return PolicyCategoryCountViewLink
     */
    public ViewLinkImpl getPolicyCategoryCountViewLink() {
        return (ViewLinkImpl)findViewLink("PolicyCategoryCountViewLink");
    }


    /**
     * Container's getter for CategoryParentLevelViewObj3.
     * @return CategoryParentLevelViewObj3
     */
    public ViewObjectImpl getCategoryParentLevelViewObj3() {
        return (ViewObjectImpl)findViewObject("CategoryParentLevelViewObj3");
    }

    /**
     * Container's getter for CategoryChildLevel2ViewObj2.
     * @return CategoryChildLevel2ViewObj2
     */
    public ViewObjectImpl getCategoryChildLevel2ViewObj2() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel2ViewObj2");
    }

    /**
     * Container's getter for CategoryChildLevel2ViewLink.
     * @return CategoryChildLevel2ViewLink
     */
    public ViewLinkImpl getCategoryChildLevel2ViewLink() {
        return (ViewLinkImpl)findViewLink("CategoryChildLevel2ViewLink");
    }

    /**
     * Container's getter for CategoryChildLevel2.
     * @return CategoryChildLevel2
     */
    public ViewObjectImpl getCategoryChildLevel2() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel2");
    }

    /**
     * Container's getter for CategoryChildLevel3ViewObj1.
     * @return CategoryChildLevel3ViewObj1
     */
    public ViewObjectImpl getCategoryChildLevel3ViewObj1() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel3ViewObj1");
    }

    /**
     * Container's getter for CategoryChildLevel2ViewObj1.
     * @return CategoryChildLevel2ViewObj1
     */
    public ViewObjectImpl getCategoryChildLevel2ViewObj1() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel2ViewObj1");
    }

    /**
     * Container's getter for CategoryChildLevel3ViewObj2.
     * @return CategoryChildLevel3ViewObj2
     */
    public ViewObjectImpl getCategoryChildLevel3ViewObj2() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel3ViewObj2");
    }

    /**
     * Container's getter for CategoryChildLevel3ViewLink.
     * @return CategoryChildLevel3ViewLink
     */
    public ViewLinkImpl getCategoryChildLevel3ViewLink() {
        return (ViewLinkImpl)findViewLink("CategoryChildLevel3ViewLink");
    }

    /**
     * Container's getter for CategoryChildLevel3.
     * @return CategoryChildLevel3
     */
    public ViewObjectImpl getCategoryChildLevel3() {
        return (ViewObjectImpl)findViewObject("CategoryChildLevel3");
    }


    /**
     * Container's getter for RequestlistView1.
     * @return RequestlistView1
     */
    public ViewObjectImpl getRequestlistView1() {
        return (ViewObjectImpl)findViewObject("RequestlistView1");
    }


    /**
     * Container's getter for InternaluserManagersViewObj1.
     * @return InternaluserManagersViewObj1
     */
    public ViewObjectImpl getInternaluserManagersViewObj1() {
        return (ViewObjectImpl)findViewObject("InternaluserManagersViewObj1");
    }

    /**
     * Container's getter for PolicyAgingEmailViewObj1.
     * @return PolicyAgingEmailViewObj1
     */
    public ViewObjectImpl getPolicyAgingEmailViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyAgingEmailViewObj1");
    }


    /**
     * Container's getter for PolicyRejectedViewObj1.
     * @return PolicyRejectedViewObj1
     */
    public ViewObjectImpl getPolicyRejectedViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyRejectedViewObj1");
    }

    /**
     * Container's getter for SectorDistinct1.
     * @return SectorDistinct1
     */
    public ViewObjectImpl getSectorDistinct1() {
        return (ViewObjectImpl)findViewObject("SectorDistinct1");
    }

    /**
     * Container's getter for PolicyCountView1.
     * @return PolicyCountView1
     */
    public ViewObjectImpl getPolicyCountView1() {
        return (ViewObjectImpl)findViewObject("PolicyCountView1");
    }

    /**
     * Container's getter for CategoryReadOnlyViewObj1.
     * @return CategoryReadOnlyViewObj1
     */
    public ViewObjectImpl getCategoryReadOnlyViewObj1() {
        return (ViewObjectImpl)findViewObject("CategoryReadOnlyViewObj1");
    }

    /**
     * Container's getter for AttachmentDownloadViewObj1.
     * @return AttachmentDownloadViewObj1
     */
    public ViewObjectImpl getAttachmentDownloadViewObj1() {
        return (ViewObjectImpl)findViewObject("AttachmentDownloadViewObj1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st =
 getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            log.error("CallStoredFunction::" + e.getMessage());
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    log.error("CallStoredFunction::" + e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for AttachedfileForEnqQueView1.
     * @return AttachedfileForEnqQueView1
     */
    public ViewObjectImpl getAttachedfileForEnqQueView1() {
        return (ViewObjectImpl)findViewObject("AttachedfileForEnqQueView1");
    }

    /**
     * Container's getter for AttachedfileForEnqAnsView1.
     * @return AttachedfileForEnqAnsView1
     */
    public ViewObjectImpl getAttachedfileForEnqAnsView1() {
        return (ViewObjectImpl)findViewObject("AttachedfileForEnqAnsView1");
    }

    /**
     * Container's getter for PolicyPendingViewObj1.
     * @return PolicyPendingViewObj1
     */
    public ViewObjectImpl getPolicyPendingViewObj1() {
        return (ViewObjectImpl)findViewObject("PolicyPendingViewObj1");
    }

    /**
     * Container's getter for ExternaluserorganizationView1.
     * @return ExternaluserorganizationView1
     */
    public ViewObjectImpl getExternaluserorganizationView1() {
        return (ViewObjectImpl)findViewObject("ExternaluserorganizationView1");
    }

    /**
     * Container's getter for OrganizationinstitutiontypeMultiView1.
     * @return OrganizationinstitutiontypeMultiView1
     */
    public ViewObjectImpl getOrganizationinstitutiontypeMultiView1() {
        return (ViewObjectImpl)findViewObject("OrganizationinstitutiontypeMultiView1");
    }
}
