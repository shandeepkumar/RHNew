package gov.bnm.rh.entities;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 13 00:16:56 SGT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PolicycategoriespartitionImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
    CategoryID {
      public Object get(PolicycategoriespartitionImpl obj) {
        return obj.getCategoryID();
      }

      public void put(PolicycategoriespartitionImpl obj, Object value) {
        obj.setCategoryID((BigDecimal)value);
      }
    }
    ,
    itemId {
      public Object get(PolicycategoriespartitionImpl obj) {
        return obj.getitemId();
      }

      public void put(PolicycategoriespartitionImpl obj, Object value) {
        obj.setitemId((String)value);
      }
    }
    ,
    isCheckedCategoryPolicy {
      public Object get(PolicycategoriespartitionImpl obj) {
        return obj.getisCheckedCategoryPolicy();
      }

      public void put(PolicycategoriespartitionImpl obj, Object value) {
        obj.setisCheckedCategoryPolicy((Boolean)value);
      }
    }
    ,
    Categories {
      public Object get(PolicycategoriespartitionImpl obj) {
        return obj.getCategories();
      }

      public void put(PolicycategoriespartitionImpl obj, Object value) {
        obj.setCategories((CategoriesImpl)value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

        public abstract Object get(PolicycategoriespartitionImpl object);

        public abstract void put(PolicycategoriespartitionImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


  public static final int CATEGORYID = AttributesEnum.CategoryID.index();
  public static final int ITEMID = AttributesEnum.itemId.index();
  public static final int ISCHECKEDCATEGORYPOLICY = AttributesEnum.isCheckedCategoryPolicy.index();
  public static final int CATEGORIES = AttributesEnum.Categories.index();

  /**
   * This is the default constructor (do not remove).
   */
    public PolicycategoriespartitionImpl() {
    }


  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    if (mDefinitionObject == null) {
      mDefinitionObject = EntityDefImpl.findDefObject("gov.bnm.rh.entities.Policycategoriespartition");
    }
    return mDefinitionObject;
  }

  /**
   * Gets the attribute value for CategoryID, using the alias name CategoryID.
   * @return the CategoryID
   */
    public BigDecimal getCategoryID() {
        return (BigDecimal)getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoryID.
     * @param value value to set the CategoryID
     */
    public void setCategoryID(BigDecimal value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for itemId, using the alias name itemId.
     * @return the itemId
     */
    public String getitemId() {
        return (String)getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for itemId.
     * @param value value to set the itemId
     */
    public void setitemId(String value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for isCheckedCategoryPolicy, using the alias name isCheckedCategoryPolicy.
     * @return the isCheckedCategoryPolicy
     */
    public Boolean getisCheckedCategoryPolicy() {
        return (Boolean)getAttributeInternal(ISCHECKEDCATEGORYPOLICY);
    }

    /**
     * Sets <code>value</code> as the attribute value for isCheckedCategoryPolicy.
     * @param value value to set the isCheckedCategoryPolicy
     */
    public void setisCheckedCategoryPolicy(Boolean value) {
        setAttributeInternal(ISCHECKEDCATEGORYPOLICY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }

    /**
     * @return the associated entity CategoriesImpl.
     */
    public CategoriesImpl getCategories() {
        return (CategoriesImpl)getAttributeInternal(CATEGORIES);
    }

    /**
     * Sets <code>value</code> as the associated entity CategoriesImpl.
     */
    public void setCategories(CategoriesImpl value) {
        setAttributeInternal(CATEGORIES, value);
    }

  /**
   * @param categoryID key constituent
   * @param itemId key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(BigDecimal categoryID, String itemId) {
    return new Key(new Object[]{categoryID, itemId});
  }


}
