package gov.bnm.rh.views;

import java.math.BigDecimal;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 16 08:29:45 GMT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Policybusinesssectorpartition1ViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
    ID {
      public Object get(Policybusinesssectorpartition1ViewRowImpl obj) {
        return obj.getID();
      }

      public void put(Policybusinesssectorpartition1ViewRowImpl obj,
                      Object value) {
        obj.setID((BigDecimal)value);
      }
    }
    ,
    itemId {
      public Object get(Policybusinesssectorpartition1ViewRowImpl obj) {
        return obj.getitemId();
      }

      public void put(Policybusinesssectorpartition1ViewRowImpl obj,
                      Object value) {
        obj.setitemId((String)value);
      }
    }
    ,
    SectorName {
      public Object get(Policybusinesssectorpartition1ViewRowImpl obj) {
        return obj.getSectorName();
      }

      public void put(Policybusinesssectorpartition1ViewRowImpl obj,
                      Object value) {
        obj.setSectorName((String)value);
      }
    }
    ,
    SectorsView {
      public Object get(Policybusinesssectorpartition1ViewRowImpl obj) {
        return obj.getSectorsView();
      }

      public void put(Policybusinesssectorpartition1ViewRowImpl obj,
                      Object value) {
        obj.setAttributeInternal(index(), value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

        public abstract Object get(Policybusinesssectorpartition1ViewRowImpl object);

        public abstract void put(Policybusinesssectorpartition1ViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


  public static final int ID = AttributesEnum.ID.index();
  public static final int ITEMID = AttributesEnum.itemId.index();
  public static final int SECTORNAME = AttributesEnum.SectorName.index();
  public static final int SECTORSVIEW = AttributesEnum.SectorsView.index();

  /**
   * This is the default constructor (do not remove).
   */
    public Policybusinesssectorpartition1ViewRowImpl() {
    }

    /**
     * Gets Policybusinesssectorpartitio1 entity object.
     * @return the Policybusinesssectorpartitio1
     */
    public EntityImpl getPolicybusinesssectorpartitio1() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for ID using the alias name ID.
     * @return the ID
     */
    public BigDecimal getID() {
        return (BigDecimal)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name ID.
     * @param value value to set the ID
     */
    public void setID(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for itemId using the alias name itemId.
     * @return the itemId
     */
    public String getitemId() {
        return (String)getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as attribute value for itemId using the alias name itemId.
     * @param value value to set the itemId
     */
    public void setitemId(String value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SectorName.
     * @return the SectorName
     */
    public String getSectorName() {
        return (String)getAttributeInternal(SECTORNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SectorName.
     * @param value value to set the  SectorName
     */
    public void setSectorName(String value) {
        setAttributeInternal(SECTORNAME, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link SectorsView.
     */
    public Row getSectorsView() {
        return (Row)getAttributeInternal(SECTORSVIEW);
    }

    /**
     * Sets the master-detail link SectorsView between this object and <code>value</code>.
     */
    public void setSectorsView(Row value) {
        setAttributeInternal(SECTORSVIEW, value);
    }


  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
